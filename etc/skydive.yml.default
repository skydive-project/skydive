# Skydive config file

# host_id is used to reference the agent, by default set to hostname
# host_id:

http:
  # define the Cookie HTTP Request Header
  cookie:
    # <name1>: <value1>
    # <name2>: <value2>

  rest:
    # log the HTTP client request and response (to log level DEBUG)
    # debug: false

  ws:
    # WebSocket delay between two pings.
    # ping_delay: 2

    # WebSocket Ping/Pong timeout in second.
    # pong_timeout: 5

    # maximum number of topology aggregated messages before sending
    # bulk_maxmsgs: 100

    # duration in seconds before flushing topology aggregated messages
    # bulk_maxdelay: 2

    # Maximum size of the message queue
    # queue_size: 10000

    # enable write compression
    # enable_write_compression: true

analyzer:
  # address and port for the analyzer API, Format: addr:port.
  # Default addr is 127.0.0.1
  # listen: :8082

  # File path to X509 Certificate and Private Key to enable TLS communication
  # Must be different than the agent
  # X509_cert: /etc/ssl/certs/analyzer.domain.com.crt
  # X509_key:  /etc/ssl/certs/analyzer.domain.com.key

  # Section defining things to be invoked on startup
  startup:
    # By default no capturing,  set filter to capture from selected nodes
    # from the beginning automatically
    # capture_gremlin: "G.V().has('Name', NE('lo'))"
    # capture_bpf: "port 80"

  # Enable/disable ssh to hosts
  # ssh_enabled: false

  # Flow storage engine
  storage:
    # Available: elasticsearch, orientdb
    # backend: elasticsearch

    # maximum number of flows aggregated between two data store inserts
    # bulk_insert: 100

    # deadline of each bulk insert in second
    # bulk_insert_deadline: 5

    # Max number of flows in write buffer (after which all flows accumulated are dropped)
    # max_flow_buffer_size: 100000
    
    # If a limit is specified, when the index reaches it, it is rolled.
    # index_entries_limit specifies the maximum number of entries allowed in an index.
    # index_age_limit specifies the maximum age (in seconds) allowed for an index.
    # For both limits, a value of -1 specifies that there is no limitation.
    # index_entries_limit: -1
    # index_age_limit: -1

    # The number of indices to keep before deleting.
    # A value of -1 specifies no limit (i.e. indices will never be deleted)
    # indices_to_keep: -1

  topology:
    # Define static interfaces and links updating Skydive topology
    # Can be useful to define external resources like : TOR, Router, etc.
    #
    # A description language similar to the dot language is used to define
    # interfaces and links. An arrow (->) is used to define a link between
    # two interfaces (parent -> child). An arrow with a single dash will
    # create an OwnerShip and a L2 link between the parent and the child.
    # An arrow with two dashes (-->) will only create a L2 link between the
    # parent and the child.
    #
    # Square brackets after the arrow is used to define additional metadata
    # of the link (->[key=value,..]). Each interface described will be
    # created in the topology excepted interfaces with the local prefix.
    # In that specific case the interface of the local host will be used.
    # Attributes of interfaces are declared using square brackets ([]).
    # The following example creates a TOR node linked to TOR_PORT1 linked
    # (l2 only) to TOR1_PORT1 linked to the TOR1 node, linked to TOR1_PORT2,
    # which is linked to the local interface eth0, with an l2 only link.
    fabric:
      # - TOR[Name=tor] -> TOR_PORT1[Name=port1]
      # - TOR1[Name=tor1] -> TOR1_PORT1[Name=port1]
      # - TOR1[Name=tor1] -> [color=red] TOR1_PORT2[Name=port2, MTU=1500]
      # - TOR_PORT1 --> TOR1_PORT1
      # - TOR1_PORT2 --> *[Type=host]/eth0

    # list of probes used by the analyzers
    probes:
      # - k8s

  replication:
    # debug: false

# list of analyzers used by analyzers and agents
analyzers:
  - 127.0.0.1:8082

agent:
  # address and port for the agent API, Format: addr:port.
  # Default addr is 127.0.0.1
  # listen: :8081

  # File path to X509 Certificate and Private Key to enable TLS communication
  # Must be different than the analyzer and unique per agent (recommended)
  # X509_cert: /etc/ssl/certs/agent.domain.com.crt
  # X509_key:  /etc/ssl/certs/agent.domain.com.key

  # Allow to use auto-signed Certificate
  # X509_insecure: false

  # Server name field specified in TLS communications.
  # Not required, but can be used to allow virtual hosting
  # X509_servername: domain.com

  topology:
    # Probes used to capture topology information like interfaces,
    # bridges, namespaces, etc...
    # Available: ovsdb, docker, neutron, opencontrail, socketinfo, lxd
    probes:
      # - ovsdb
      # - docker
      # - neutron
      # - opencontrail
      # - socketinfo
      # - lxd

    netlink:
      # delay in seconds between two metric updates
      # metrics_update: 30

    neutron:
      # auth_url: http://xxx.xxx.xxx.xxx:5000/v2.0
      # username: admin
      # password: password123
      # tenant_name: admin
      # region_name: RegionOne

      # The endpoint_type value must be 'public', 'internal' or 'admin'
      # endpoint_type: public

      # When using Keystone V3, domain_name needs to be specified
      # domain_name: MyDomain

  flow:
    # Period in second to get capture stats from the probe. Note this
    # currently only works for the pcap probe
    # stats_update: 1

  metadata:
    # info: This is compute node

dpdk:
  # DPDK port listening flows from
  ports:
    # - 0
    # - 1

  # nb workers per port
  # workers: 4

  # debug message every n seconds
  # debug: 1

sflow:
  # Default listening address is 127.0.0.1
  # bind_address: 127.0.0.1

  # Port min/max used when starting a sflow probe, a agent will be started
  # with a port from this range
  # port_min: 6345
  # port_max: 6355

ovs:
  # ovsdb connection, Format supported :
  # * addr:port
  # * tcp://addr:port
  # * unix:///var/run/openvswitch/db.sock
  # If you use the tcp connection you need to authorize connexion to ovsdb agent
  # at least locally
  # % sudo ovs-appctl -t ovsdb-server ovsdb-server/add-remote ptcp:6400:127.0.0.1
  # ovsdb: unix:///var/run/openvswitch/db.sock

  oflow:
    # Enable the parsing of openflow rules (disabled by default)
    # enable: false

    # The probe can connect to remote bridge over TLS (ssl url).
    # The default value is empty for those options.
    # Path to the private key file (TLS connection)
    # key: /etc/ssl/private/agent.key

    # Path to the certificate associated to the key (TLS connection)
    # cert: /etc/ssl/certs/agent.crt

    # Path to certificate authority validating bridge connections (TLS connection)
    # ca: /etc/ssl/certs/ca.crt

    address:
      # Map translating bridge names into URL for remote connection
      # - bridge: ssl:xxx.yyy.zzz.ttt:port

docker:
  # url: unix:///var/run/docker.sock

netns:
  # allow to specify where the netns probe is watching network namespace
  # run_path: /var/run/netns

opencontrail:
  # Host address of the OpenContrail vrouter agent
  # host: localhost

  # TCP port of the OpenContrail vrouter agent
  # port: 8086

  # UDP dest port for MPLS traffic
  # mpls_udp_port: 51234

storage:
  # Elasticsearch connection information.
  elasticsearch:
    # host: 127.0.0.1:9200
    # maxconns: 10
    # retry: 60
    # bulk_maxdocs: 100
    # bulk_maxdelay: 5

    # If a limit is specified, when the index reaches it, it is rolled.
    # index_entries_limit specifies the maximum number of entries allowed in an index.
    # index_age_limit specifies the maximum age (in seconds) allowed for an index.
    # For both limits, a value of -1 specifies that there is no limitation.
    # index_entries_limit: -1
    # index_age_limit: -1

    # The number of indices to keep before deleting.
    # A value of -1 specifies no limit (i.e. indices will never be deleted)
    # indices_to_keep: -1

  # OrientDB connection information
  orientdb:
    # addr: http://127.0.0.1:2480
    # database: Skydive
    # username: root
    # password: hello

graph:
  # graph backend memory, elasticsearch, orientdb
  # backend: memory

logging:
  # level: INFO

  # Default backend used: stderr
  backends:
    # - stderr
    # - stdout
    # - file
    # - syslog

  # configuration of the 'file' backend
  file:
    # path: /var/log/skydive.log

  # configuration encoder could be for all backends or for specific one
  # encoder: json
  # color: false

auth:
  # specify the type of authentication mechanism: noauth, basic, keystone (default: noauth)
  # type: basic
  basic:
    # file: /etc/skydive/htpasswd

  keystone:
    # auth_url: http://xxx.xxx.xxx.xxx:5000/v2.0
    # tenant_name: admin
    # When using Keystone V3, domain_name needs to be specified
    # domain_name: MyDomain

  # The 'analyzer_username' and 'analyzer_password' parameters are
  # used by the agent to authenticate against the analyzer
  analyzer_username: admin
  analyzer_password: password

etcd:
  # server parameters
  # when 'embedded' is set to true, the analyzer will start an embedded etcd server
  # embedded: true
  # listen: 0.0.0.0:12379

  # maximum number of WAL and snapshot files. 0 means unlimited
  # max_wal_files: 0
  # max_snap_files: 0

  # path where the etcd files will be stored.
  # data_dir: /var/lib/skydive/etcd

  # client parameters
  servers:
    # - http://127.0.0.1:12379

  # name to use for clustering, by default it is set to the host id
  # name: analyzer1

  # list of peers for etcd clustering between analyzers
  # each entry is composed of the peer name and the endpoints for this peer
  peers:
    # analyzer1: http://172.17.0.2:12380
    # analyzer2: http://172.17.0.3:12380

  # client_timeout: 5

flow:
  # Without any new packets, a flow expires after flow.expire
  # seconds
  # expire: 600

  # Seconds between flow updates (metrics, enhancements,...)
  # update: 60

  # Protocol to use to send flows to the analyzer: websocket or udp
  # protocol: udp

k8s:
  # EXPERIMENTAL: k8s probe is still under development and should not be used
  # on production systems
  #
  # kubeconfig resolution order:
  # if kubeconfig param is defined then use it
  # else if $KUBECONFIG environment is define then use it
  # else if $HOME/.kube/config file exists then use it
  # else use empty configuration (for accessing from within the k8s cluster)
  # Specify the path of k8s configuration YAML file
  # config_file: /etc/skydive/kubeconfig

  # Sub probes provided by the k8s probe
  probes:
  - networkpolicy
  - pod
  - container
  - node
  - namespace

ui:
  # Specify the extra assets folder. Javascript and CSS files present in this
  # folder will be added to the WebUI.
  # extra_assets: /usr/share/skydive/assets

  # select between light, dark themes
  # theme: dark

  # Settings specific to the topology view
  topology:
    # Pre-defined Gremlin expression used in the WebUI for Filtering and Highlighting.
    favorites:
    #   Namespaces: "g.V().Has('Type', 'netns').OutE().BothV()"
    #   Layer2: "g.E().Has('RelationType', 'layer2')"

    # Highlight Gremlin expression used by default and applied on WebUI load.
    # default_highlight: "G.V().Has('Name', 'tap0')"

  # update rate of links in seconds
  bandwidth_update_rate: 5

  # 'absolute' - thresholds in Kbit
  # 'relative' - thresholds in % relative to link speed reported by netlink
  bandwidth_threshold: absolute
  bandwidth_absolute_active: 1
  bandwidth_absolute_warning: 10
  bandwidth_absolute_alert: 100
  bandwidth_relative_active: 0.1
  bandwidth_relative_warning: 0.4
  bandwidth_relative_alert: 0.8
