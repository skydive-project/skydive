// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package agent

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/skydive-project/skydive/common"
	pod "github.com/skydive-project/skydive/graffiti/pod"
	websocket "github.com/skydive-project/skydive/graffiti/websocket"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveAgent(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Clients":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Clients = make(map[string]websocket.ConnStatus)
				} else {
					out.Clients = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 websocket.ConnStatus
					easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v1)
					(out.Clients)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Analyzers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Analyzers = make(map[string]pod.ConnStatus)
				} else {
					out.Analyzers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 pod.ConnStatus
					easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveGraffitiPod(in, &v2)
					(out.Analyzers)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TopologyProbes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TopologyProbes = make(map[string]interface{})
				} else {
					out.TopologyProbes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.TopologyProbes)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FlowProbes":
			if in.IsNull() {
				in.Skip()
				out.FlowProbes = nil
			} else {
				in.Delim('[')
				if out.FlowProbes == nil {
					if !in.IsDelim(']') {
						out.FlowProbes = make([]string, 0, 4)
					} else {
						out.FlowProbes = []string{}
					}
				} else {
					out.FlowProbes = (out.FlowProbes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.FlowProbes = append(out.FlowProbes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveAgent(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Clients\":"
		out.RawString(prefix[1:])
		if in.Clients == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Clients {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Analyzers\":"
		out.RawString(prefix)
		if in.Analyzers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Analyzers {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveGraffitiPod(out, v6Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"TopologyProbes\":"
		out.RawString(prefix)
		if in.TopologyProbes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.TopologyProbes {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"FlowProbes\":"
		out.RawString(prefix)
		if in.FlowProbes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.FlowProbes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveAgent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveAgent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveAgent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveAgent(l, v)
}
func easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveGraffitiPod(in *jlexer.Lexer, out *pod.ConnStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsMaster":
			out.IsMaster = bool(in.Bool())
		case "ServiceType":
			out.ServiceType = common.ServiceType(in.String())
		case "ClientProtocol":
			out.ClientProtocol = websocket.Protocol(in.String())
		case "Addr":
			out.Addr = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "IsConnected":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(websocket.ConnState)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.State).UnmarshalJSON(data))
				}
			}
		case "ConnectTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConnectTime).UnmarshalJSON(data))
			}
		case "RemoteHost":
			out.RemoteHost = string(in.String())
		case "RemoteServiceType":
			out.RemoteServiceType = common.ServiceType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveGraffitiPod(out *jwriter.Writer, in pod.ConnStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsMaster\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsMaster))
	}
	{
		const prefix string = ",\"ServiceType\":"
		out.RawString(prefix)
		out.String(string(in.ServiceType))
	}
	{
		const prefix string = ",\"ClientProtocol\":"
		out.RawString(prefix)
		out.String(string(in.ClientProtocol))
	}
	{
		const prefix string = ",\"Addr\":"
		out.RawString(prefix)
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"IsConnected\":"
		out.RawString(prefix)
		if in.State == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.State).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ConnectTime\":"
		out.RawString(prefix)
		out.Raw((in.ConnectTime).MarshalJSON())
	}
	if in.RemoteHost != "" {
		const prefix string = ",\"RemoteHost\":"
		out.RawString(prefix)
		out.String(string(in.RemoteHost))
	}
	if in.RemoteServiceType != "" {
		const prefix string = ",\"RemoteServiceType\":"
		out.RawString(prefix)
		out.String(string(in.RemoteServiceType))
	}
	out.RawByte('}')
}
func easyjsonCb9d4455DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in *jlexer.Lexer, out *websocket.ConnStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ServiceType":
			out.ServiceType = common.ServiceType(in.String())
		case "ClientProtocol":
			out.ClientProtocol = websocket.Protocol(in.String())
		case "Addr":
			out.Addr = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "IsConnected":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(websocket.ConnState)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.State).UnmarshalJSON(data))
				}
			}
		case "ConnectTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConnectTime).UnmarshalJSON(data))
			}
		case "RemoteHost":
			out.RemoteHost = string(in.String())
		case "RemoteServiceType":
			out.RemoteServiceType = common.ServiceType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb9d4455EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out *jwriter.Writer, in websocket.ConnStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ServiceType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ServiceType))
	}
	{
		const prefix string = ",\"ClientProtocol\":"
		out.RawString(prefix)
		out.String(string(in.ClientProtocol))
	}
	{
		const prefix string = ",\"Addr\":"
		out.RawString(prefix)
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"IsConnected\":"
		out.RawString(prefix)
		if in.State == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.State).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ConnectTime\":"
		out.RawString(prefix)
		out.Raw((in.ConnectTime).MarshalJSON())
	}
	if in.RemoteHost != "" {
		const prefix string = ",\"RemoteHost\":"
		out.RawString(prefix)
		out.String(string(in.RemoteHost))
	}
	if in.RemoteServiceType != "" {
		const prefix string = ",\"RemoteServiceType\":"
		out.RawString(prefix)
		out.String(string(in.RemoteServiceType))
	}
	out.RawByte('}')
}
