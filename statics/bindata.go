// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x1c\xfd\x6f\xdb\x36\xf6\xf7\xfb\x2b\x58\xb5\x37\x3b\x68\x2d\xd9\x49\x93\x76\x59\x1c\xe0\xd6\x15\xb7\x02\xb7\xad\xc0\x5a\xdc\xdd\x8c\xdc\x40\x4b\xb4\xcd\x44\x16\x35\x91\x76\xe2\x75\xf9\xdf\xef\x3d\x52\x5f\x96\x45\x99\x4e\xba\xdb\x70\x44\xd1\x58\x12\xdf\x07\xdf\xf7\xa3\x29\x13\x18\x17\x4f\xbe\xf9\xe1\xcd\x87\x7f\xbf\x7f\x4b\x16\x6a\x19\x5f\xfe\x45\xdf\xc3\x8f\x24\xa6\xc9\x7c\xec\xb1\xc4\x2b\x6e\x32\x1a\x99\x8f\xfa\x72\xc9\x14\x25\xe1\x82\x66\x92\xa9\xb1\xb7\x52\xb3\xc1\x6b\x2f\x68\x3e\x5f\x28\x95\x0e\xd8\x2f\x2b\xbe\x1e\x7b\xff\x1a\x7c\xfc\xdb\xe0\x8d\x58\xa6\x54\xf1\x69\xcc\x3c\x12\x8a\x44\xb1\x04\x80\xdf\xbd\x1d\xb3\x68\xce\x76\xc1\x13\xba\x64\x63\x6f\xcd\xd9\x6d\x2a\x32\x55\x83\xb8\xe5\x91\x5a\x8c\x23\xb6\xe6\x21\x1b\xe8\x8b\x17\x84\x27\x5c\x71\x1a\x0f\x64\x48\x63\x36\x1e\x6d\x61\x53\x5c\xc5\xec\xf2\xc7\x9b\x4d\xc4\xd7\x8c\x7c\x10\xa9\x88\xc5\x7c\x73\x11\x98\xfb\xd5\xbc\x98\x27\x37\x64\x91\xb1\xd9\xd8\x43\xd6\xe5\x79\x10\x2c\xe9\x5d\x18\x25\xfe\x54\x08\x25\x55\x46\x53\xbc\x08\xc5\x32\x28\x6f\x04\x27\xfe\x89\x7f\x1a\x84\x52\x56\xf7\xfc\x25\x87\x59\x52\x7a\x24\x63\xf1\xd8\x93\x6a\x13\x33\xb9\x60\x4c\x21\x57\x15\x39\x19\x66\x3c\x55\x44\x66\xa1\xa1\x07\xe4\x42\x11\x31\xff\xfa\x97\x15\xcb\x36\x9a\x8c\xf9\x38\x38\xf6\x47\xfe\x4b\x8d\xf5\x5a\x7a\x97\x17\x81\x81\xbc\xb4\xa3\x42\xd6\x81\xd5\x6b\xe9\x87\xb1\x58\x45\xb3\x98\x66\x4c\x23\xa4\xd7\xf4\x2e\x88\xf9\x54\x06\xe1\x46\x09\x10\x56\xca\x82\x63\xff\xd4\x1f\x56\xd7\x0f\xa0\xe3\x67\xf4\x76\xce\x95\xa6\x10\xa6\x4c\x81\x60\x55\x10\xd1\x79\xc6\x82\xf5\xd0\x7f\xe5\xbf\x0c\x22\x2e\xf3\x3b\x87\xa2\x9f\x03\xa4\x0f\xc8\x17\xab\xe9\x4a\xb2\x2c\x37\x02\x4d\x4a\xd2\x19\x98\x20\x4f\x82\xd9\xd9\xd9\x71\x38\x63\x2f\x4f\xc3\xd1\x2b\x46\x47\xd1\xab\xe8\xe5\xab\x00\x78\x0a\x46\xaf\x87\x2c\x8c\x5e\x4f\x4f\x5e\xb3\xd3\xb3\x2f\x87\xaf\xa7\xec\xe4\x98\x8e\x5e\x7e\x79\x76\x32\x9c\x8e\x4e\xc2\xd3\xd3\x11\x3b\x3d\x7d\x75\xcc\x34\x95\x19\x8f\xd9\xc8\x57\x77\xaa\xce\x5b\xb7\xba\xba\x45\xfc\x8b\xe2\xe9\x31\x88\xf7\x18\xc4\x9b\x2b\x15\x6f\x75\x49\xa0\x61\x82\x8f\xa3\xd1\x6a\x82\x44\x6d\x52\x70\x2b\xc5\xee\x54\xa0\x27\x04\x07\xea\xb7\xb4\x9b\xca\x62\xae\xe5\x00\x89\x6a\x36\x4e\xab\xfb\xfa\x66\x63\xa5\x35\x5a\xc8\x53\x45\x7b\x2a\xa2\x0d\xf9\x54\x5e\xe2\x48\x69\x14\xf1\x64\x3e\x50\x22\x3d\x27\xa7\xc3\xf4\xee\xab\xad\xc7\x53\x1a\xde\xcc\x33\xb1\x4a\xa2\x41\x08\x1e\x9d\x9d\x93\xa7\xb3\xd9\xac\x9a\x73\x5f\x7e\x7a\x1a\x36\x51\xeb\xa8\x71\x4e\x46\xc3\xe1\x5f\xb7\x91\x2e\x18\x9f\x2f\x54\xdb\x13\x30\xe1\x34\xa6\x9b\x73\x32\x8d\x45\x78\xb3\xfd\x2c\x15\x12\xc2\x8f\x48\xce\x09\x9d\x4a\x11\xaf\x14\x6b\x63\x03\xa4\x60\xd6\xdc\x14\xf8\xe5\x16\xb2\x35\xcd\x88\xbc\xe5\x2a\x5c\xbc\x5b\xce\xc9\x98\xf4\x6a\x9a\x38\xf6\x39\x78\xc0\x8c\x27\x11\xcb\xb4\x3a\x22\xaa\x68\x80\xf7\x64\x70\x0b\x77\xc5\xad\x1c\xbc\x1e\x40\xf8\xcc\xc4\x40\x13\x0b\xce\x5e\x06\x06\x99\x9f\x26\xf3\xde\x57\x3b\x94\x30\xb6\x7e\x26\x3a\xb3\x58\xdc\xfe\x8c\x49\x41\x59\x68\xf1\x44\xcd\x3e\x13\xad\x5b\x9e\xb1\xe8\xe7\x84\xa9\x5b\x91\xdd\xe4\xe4\xb6\xe8\xcd\x56\x49\x88\x2a\x21\x73\xa6\xbe\x83\x74\x82\x48\x65\x9f\xc5\x47\x0d\x4b\xc0\xc1\x67\xa4\xff\xa4\xef\x95\xd3\x3c\xe0\x94\xc0\xd4\xa3\x9d\x99\x38\x32\xa6\x56\x59\x42\x3c\xaf\x41\xb1\x58\xe5\xb2\x40\x83\xeb\x04\x33\xcf\x44\x32\xbf\xfc\x8e\x86\xe7\xa4\x47\x9e\x03\xda\x89\x07\x17\xde\x15\x79\xde\x43\x83\xd0\x4f\x2f\xa6\x59\x70\xd9\x10\x98\x5e\x84\xc8\x48\xff\xc6\x70\x33\xa9\xf1\x77\xd5\xb6\x0a\x1c\x15\xed\xe7\x63\x72\x03\xe4\x7a\x35\xaa\x15\xf8\xe4\x06\xc8\x13\x4f\x93\xf5\x76\xc9\xde\xef\x2e\x2c\x5f\x74\x89\x7f\x1b\xe8\xde\x22\xfb\x55\x0a\x93\xd9\xdb\x98\x2d\x21\x66\xcb\xbe\xca\x53\xef\x0b\xe0\xc7\xdc\x6a\x5b\x87\xb6\x4a\xc6\x32\x70\x7d\x90\xe0\xa7\xfb\x5d\xfe\x70\xc6\x6a\xc5\xa3\x0f\xe2\x5d\xd4\x31\x65\x9a\x71\x28\x2c\xe4\x7e\x24\x60\x96\xf9\xa4\xd6\x59\x0b\x21\x15\x16\x23\x30\xa7\x58\xc1\xc4\xfb\x16\x6e\x7a\x57\x2d\x10\xc5\xd2\x26\x5e\x02\xd9\x1c\x84\xed\xa7\x2b\xb9\xe8\x7f\x42\xb1\x9d\x93\x4f\x3c\x3a\x2f\x11\xbe\x80\x32\x6b\xca\xe2\xfa\x0d\xbe\x9c\x83\xc6\x12\x91\xb0\xde\xfd\xfd\x51\x0b\xfa\x20\x20\x33\x9e\x49\x05\xac\x90\x08\xe2\x32\xa1\x71\x4c\xd4\x82\x11\x4d\xad\xdd\x82\x2a\x61\x7c\x8f\xcb\x00\x73\xaa\xd6\xf1\xc3\x5a\x7e\x6d\xe4\x64\xb7\x2a\x03\xab\x65\x5d\xca\x02\x4c\x6b\x20\xd6\x72\x80\xd6\x55\xe1\x6e\x61\xb8\x42\xf0\xb5\xb8\xd3\x38\x7a\x00\x97\xeb\x66\x2a\xee\x7e\xae\x30\xbc\x8b\x76\xd5\xe4\x20\xd2\x56\x98\x62\xa0\xbc\x6b\xe4\x5f\x74\x4e\xce\xd5\xe1\x79\xdd\xd3\x52\xc8\xc3\x89\xaa\xa9\xad\x9b\x83\x4a\xa5\xad\xf3\xda\xf5\x8c\xe3\xa1\xeb\xae\xd6\xdc\xb5\xe0\x7c\xb1\x95\xf2\xec\x53\x8b\x05\x3b\x09\x52\xaf\xb7\x4c\x60\xf6\x79\x19\x4d\x6e\x20\xd1\x1e\x28\x13\xcc\x57\x72\xcb\x13\xeb\x16\x3c\xa9\x56\x73\x35\xf1\xde\xe3\x5c\xef\xaa\x15\x4f\xe9\x18\x88\xb0\x70\x0b\x8d\xdc\xe6\x05\x05\x75\x6d\xc3\xa5\x4b\x3c\x2f\x11\x58\x18\xc6\xf1\x58\x03\x36\x64\x9d\x6c\xb7\xe0\xc6\xcd\x82\x9d\x3d\x43\x2b\x35\xaf\x15\xba\x67\x96\x29\xe2\x7c\x3b\xf5\x6a\xd9\x4e\x0a\xf6\xae\xda\x73\x2b\x0e\xbb\xee\x71\x40\xfc\x33\x4c\x63\x00\x44\x6c\x0e\x42\x67\xc6\x38\x1e\x14\x35\xb4\x8a\x7b\x83\xcb\x5e\xae\xe9\x7d\x82\x92\x62\x95\x85\xcc\xc5\xff\x70\x28\x9a\x81\x90\xdc\x14\xac\x6b\x1f\x08\x4e\x50\x60\xf2\x68\x4f\x84\xc2\x15\xff\xd3\xd4\xb8\x2f\xf7\xcf\x7c\x63\xca\x67\xef\xe9\xc9\xc9\x89\xf7\x40\xbd\x60\x6d\x87\x7e\xd9\x50\xf3\xc4\x83\xec\xca\xb2\x19\x0d\x99\xcd\x13\x71\x94\xde\x88\x68\x0a\x6f\xd4\x28\xbb\xbc\xb1\xa0\xab\x3d\x32\x77\xcd\xe7\x25\x8a\x0e\x66\x71\x60\xee\x07\x30\x4d\x64\x52\xc0\x00\xbf\x1f\x3f\xbe\xfb\x06\x13\xfb\x3e\x58\x2c\x3e\x26\xf8\xe1\x2a\xc7\x62\xcb\x5e\x0d\x20\x98\xb9\x05\x56\x23\xbe\x87\xe3\xc7\x44\x11\x1c\x68\xd4\x86\xd1\x6e\x93\xc0\x91\x47\x93\x82\xb5\xfd\x00\x07\x47\x14\xcd\x11\x46\x95\xbc\x2b\xd8\x3f\xdb\x16\x59\x1a\x52\xb4\x47\x16\x1c\xdd\x56\x8c\x03\x22\x0c\xda\x12\xc6\x17\xc4\xe9\xa8\x92\xc3\x63\x0c\x8e\x2a\xb8\x57\x51\xc6\x55\x45\x45\xa4\x71\x89\x1d\x38\x8a\x58\xe3\x8c\xff\x80\x78\x83\xc3\x3d\xe6\x14\xb3\xdd\xe2\x0e\x0e\x27\xad\x4d\x57\x3c\x8e\x74\x2d\x5c\xb4\x0f\x4b\x9a\xa6\xf8\x17\xc3\x0b\xde\x9f\x89\x18\x7a\x54\xbc\xa3\xd5\xa5\xb7\x14\xb3\x55\x68\xcf\x21\x38\xb0\x3b\xf4\xde\x03\x46\xaf\x0c\x4a\x95\xb1\x91\x2f\xbe\xd8\x0d\x21\x7a\xb2\xb5\x9a\xae\x0f\x64\x14\x03\x4e\x5b\x20\x32\x58\xf6\x9b\x90\x6e\x5e\x75\x34\xc3\x0a\xc6\xac\xfc\x08\xf9\x7a\xd2\x2f\xd1\xd7\x9e\x74\xbb\x47\x9d\x31\x98\x5d\x46\xaa\x02\x53\x77\x88\xbb\xb7\x27\x8f\xf6\x32\xcf\xa5\xf5\x2c\x73\x43\x22\x77\xdb\x97\xef\x99\xfa\x5e\x76\xb4\x2e\x06\xae\xd9\xba\x18\x4c\x16\x8b\x02\x4b\x92\x37\x3c\x25\x09\x53\x89\x24\x50\xc7\x2e\x88\x48\xe2\x0d\xfc\x87\xb4\xf3\x64\x06\xc1\x88\x26\x68\x48\xfa\x11\xda\x56\x2c\x44\x8a\x5b\x52\xad\x38\x51\x49\x3f\x4c\xaf\x59\xa8\xfc\x1b\xb6\xa9\x3a\xe1\x6a\x01\x13\xc3\x53\x23\x61\x1e\xf9\x31\x4b\xe6\xc0\xc1\x05\x39\xee\xb2\x27\x34\x64\x9e\xac\x58\xbb\x7a\x5a\x84\x9a\x2f\x14\xf8\x4a\x84\x22\x99\x80\xff\xcc\x7a\x4d\x4f\x49\xa0\x31\xb3\xca\xd3\x84\xfa\x2d\x99\xb6\xd3\xc5\x55\xe7\x4a\x7b\x32\x26\x1e\x52\xf1\xba\x56\xf1\xd8\x32\x19\x15\xed\x54\x24\x1b\xa6\x9c\xdb\xb6\xc3\xba\xc1\xee\x02\xaa\x1b\x8b\x16\x2a\x2e\xe3\x20\x45\x16\xb5\x97\xab\x55\x75\x37\x44\x07\x95\x60\x65\xf9\xa5\x9d\xac\x5e\x7c\xd9\x20\xf6\xd5\x5d\x5d\x7d\x65\x51\x69\x2d\xe7\x76\xfc\x68\x74\x3b\xc8\x3f\x6c\x52\xe6\x41\x1c\x03\x2b\x34\x05\x4a\xa7\x1d\x56\xd4\xca\x36\xd6\x35\xfb\xe4\xbd\x49\x2d\x4e\x74\xa6\x20\xb7\x0c\x94\x23\xdd\x11\xda\xfe\xb4\x55\xd3\x3a\xaa\xd3\x20\x72\x49\x4c\xda\x1a\xc2\x05\x2c\xa9\x30\x05\x03\xdb\x08\x4f\x0e\x98\x70\x68\x44\x79\x9e\x6b\xc3\x33\x29\x29\x95\x86\xe0\x84\xd7\xe4\xbe\x0a\x7b\xc9\xa6\x74\x4c\x73\x38\x72\x88\x49\x89\x06\xf3\x1d\x5a\x69\x77\xae\xc3\x61\xcf\x77\xdd\x4f\x2d\x7e\x8c\xe3\xb1\x31\xd0\xa5\xba\x3b\xa8\xb8\x2f\xc2\x5b\x11\xa0\x1c\xa2\x26\x7f\xe8\x1e\x81\x73\x25\xbf\x77\x8f\x00\x2c\x83\xc6\x19\xa3\xd1\x06\x8d\x42\xac\x25\xa1\x51\x04\x79\x2d\x12\x4a\xb1\x88\xe8\xef\xd9\x24\x4f\xc0\x41\xd5\x82\x4b\x02\xff\xd0\x39\xa5\xb1\xf5\xc2\x77\xd5\x82\x2a\x78\xd4\x49\x27\x21\xd4\xe0\xcf\x9d\x94\x26\xba\x0e\xa3\x26\x9d\x76\x46\xa9\xa2\x66\x2b\xba\xc9\x7d\xde\xf4\x39\x9a\x0d\x4d\xb3\x6c\x35\xf0\xca\xbd\xd1\xd8\xee\x7a\x7f\xbf\x86\xc3\xe8\xe8\xb0\x8e\xe3\xec\xc0\x8e\x63\x38\x1c\x3a\x74\x1c\xd6\x87\x9d\xd9\xed\xa0\x9d\x81\x47\xed\x0a\xfc\x3e\x4d\xcf\xef\xd5\xf0\x3c\xb2\xd9\x31\xc1\xfe\x61\x2d\xcd\xe1\xed\xcc\x23\x1a\x16\xd0\x0a\x7e\x79\xa9\x85\x9c\xcb\x1c\x75\xd1\xd0\x8f\xbd\xcf\xd9\xe9\xe5\xda\xc5\x6a\xdc\x52\x17\x5f\xdb\x56\xd7\xbe\x28\xe3\x8d\xdb\xd3\xb7\xc4\x62\x81\x7b\x68\xd4\xc1\x68\x53\xb2\x58\x46\x9c\x82\x0b\xbb\xbb\x16\xd1\xa6\x80\xb5\xcf\x2c\xe2\x8b\x03\xce\x22\xb2\x50\xb9\xe8\x8c\x2c\x6e\x7b\x18\x6e\x7b\x17\xad\x11\xc4\x6a\x2e\x4d\x6b\x29\xbe\xbc\x74\xb6\x96\xa2\xf0\xb1\xa8\xa4\x48\x38\xf5\x58\x53\xd6\xc5\xd8\x9d\xad\x99\x5a\x74\x56\xc5\x6d\xf6\x56\xd4\x4e\x5d\x06\x84\xa3\xcd\xf8\x3a\x6c\xf5\x1e\xac\x4e\xb2\x0e\x5e\xda\xf0\xb9\xf2\x62\xf7\x9b\x83\x9a\xae\xff\x27\xbf\xd8\xb7\xc5\xf7\x3f\x70\x8b\xed\xab\xad\xcb\xf2\x38\x01\xee\x4d\x54\xc5\x62\xb8\xe7\x1c\x81\xf6\x10\x6e\x0e\x4f\x34\x6a\x6a\x9c\xde\xca\x1c\x3e\x07\xbb\xd8\x01\x98\x70\x70\x16\x24\x6b\xed\x50\xf3\x33\x24\xcb\xad\x33\x24\x08\x7d\x44\x7e\xfb\x8d\x3c\xc1\x4f\x93\xda\xd3\x8e\xda\xb6\xda\xcb\x69\x9d\x12\x6e\xfc\x67\xfd\xde\x53\x34\x1a\x44\xea\xf3\xe8\x48\x1f\xf9\xea\x77\xef\x0e\xe9\x1a\xbe\x3b\x3f\xeb\xf3\x90\xe7\xa4\x57\x8a\x78\xcf\xc6\x07\x9e\x21\x3b\x27\x3b\x2b\xb3\xa7\xd4\xbd\x86\xd8\xcd\x5f\x18\x53\x29\x19\xf4\x0c\x3d\x5c\xef\xa0\x3c\x6f\xd9\xfe\xb5\xba\xa6\xd8\x6e\x81\x87\x1a\x20\x86\x59\xa0\xad\x3e\xea\xe3\x2c\x6d\x07\x4a\x4a\x13\x5d\x50\xf9\x66\x41\x93\x39\x8b\xfa\x28\x0e\xab\x5d\x96\x9b\x91\x60\x25\x38\x11\x42\xb1\xd9\xbc\xe1\x5d\x7d\x75\xb1\xc1\x03\x1c\xec\x02\x4d\x0a\x9c\x96\xd8\x67\x2c\xb4\x4e\xb8\xb6\x26\x6d\xa5\xb5\xeb\x0a\x19\x26\x87\x6a\x63\xe9\x1f\xe5\x94\xee\x7a\xaf\x1d\x95\x0d\x93\x3d\x58\xe7\xe7\x8e\x20\x3b\x5a\xf7\x36\x77\xef\xec\xdc\xca\xb1\xcc\x28\x64\x95\xce\x93\x4b\xa8\xe9\x70\x63\xd1\x2d\x86\x9f\xe2\xf4\xb0\x55\xbb\x88\xa1\x08\x1f\x68\x28\xd6\x30\x03\x76\x3c\xb1\x34\x51\x3a\xa1\xe0\xe3\xdd\xb5\xb5\x04\x05\xd4\x6b\xd3\xec\xba\xaa\x00\x3c\x00\x2a\x66\xb0\x4c\xd0\x2c\xe4\xfd\x55\x12\xb1\x19\x4f\xa0\x2c\xea\x08\x49\x1b\x1f\x18\x56\x99\xd8\xf4\xdb\x7c\xa7\x2b\x5b\x1b\xd1\x3b\x15\x42\x2e\x8e\xd1\x4a\xa3\x71\xcc\xac\xcb\x35\x6a\x29\xa3\x45\x94\x21\x7a\x56\x79\x7e\xd5\x12\x51\xf5\xae\xc2\x79\x69\x16\xfd\x2e\x37\x30\xe7\x17\x7d\x8d\x17\x37\x1a\x3a\x7a\xb9\xed\xe4\x86\x93\xb7\x78\x6d\x03\xb1\x04\x54\x0c\xf7\x14\x34\x0a\x79\x38\x12\xe1\x0a\x31\xf8\x50\x08\xe4\xf2\xf9\x7a\xf3\x2e\xea\xf7\xc2\x4d\xef\xa8\x1d\x3a\xa5\x09\x04\x62\x72\xa7\xcf\xc0\xbe\x20\xb0\xd2\xa1\x8d\xd0\x92\x27\x3f\x09\xb1\x84\x19\xfe\xb1\x65\x06\xbd\x33\x33\x46\xed\xcf\x7f\x85\x87\x50\xdd\xbe\x4d\xe8\x34\x66\x50\x18\xa1\x9f\xb7\xcf\xc4\xc3\xdf\x3f\x39\xcf\x86\x45\x24\xee\x78\xdf\x3b\xcf\x9e\x8a\xbb\x1f\x41\x29\x5a\xf1\x0e\xd3\xf3\xb4\x36\xb1\x2a\xbd\x3b\xe1\x49\x4d\x0a\xeb\xa9\x1e\x46\x8c\x3d\xe9\xd8\x29\x87\xe2\xe8\x35\x4f\x4e\xe3\x21\x51\x3c\x3b\xbd\x87\x80\x86\xd5\x7b\x87\x08\x80\x76\xda\xd7\x57\x47\x2e\x70\x72\x01\x1e\x85\x70\x19\x2c\x09\x22\x55\xbc\x6f\x39\x4d\x4e\xf9\x92\xce\x59\x49\x98\x2f\xe7\x07\x92\x45\x24\x07\xd1\x9e\x81\x1b\x0d\x24\xff\x15\xc1\x8f\x8f\x1f\xba\xd3\x6b\x27\xe4\xac\xfb\x09\x2c\xf6\xc9\xd8\xc3\xaf\xa2\xbc\xab\xcf\x66\x04\xfa\x08\x3c\x2c\xed\xcc\xe1\xcb\xfa\x9e\x39\x16\xaf\x67\xff\x81\x82\x78\xa6\xcb\xf3\x4b\xe2\xe0\x0c\xa1\x94\x4e\x52\xa8\xbd\x63\x80\x56\x32\x1a\xa6\x77\x2e\xb6\x51\x80\xc5\x6c\xa6\x1e\x02\x37\x15\x4a\x89\xe5\x43\x20\xb3\x5c\x11\xce\x80\x58\xa5\x0f\xd6\x34\xe6\xf3\x04\xc1\x70\xa1\xae\x50\x8b\x12\x2a\x64\xb8\x29\x7e\xa0\xc7\x56\xb1\x85\x52\xfa\x18\x67\xfd\x23\x7d\xef\x3f\xe6\x7b\x8f\x7d\x7e\xf7\x50\x7b\x3b\x7d\xa0\xbd\x1d\x08\x57\xb3\xb7\x03\x21\x2b\x7b\x73\x04\xfc\x33\xd8\x1b\x63\x4e\x11\xfe\x4f\x68\x6f\x58\xfa\x7f\xf6\x10\x6f\x52\x66\xb9\x89\xe3\x94\x38\x63\x28\x20\x2b\x89\x96\x08\xf4\xfe\x8e\x3b\x02\xcd\x6b\x89\x40\x5f\x39\x01\x9b\xad\xab\x01\xcd\x32\x71\x5b\xd3\xeb\xc9\xc9\xc9\x83\x95\xd3\xfa\xc4\xd2\x80\xc5\x74\x23\x56\x9d\xfb\x25\xd8\x4c\xe8\x65\xcd\x33\xdb\xb1\x7e\x4b\x6f\x97\x97\xf4\xe7\xe5\xa7\xdd\xd6\xe8\xc8\xed\xed\x9a\x8c\xcd\x32\x26\x17\x65\x4b\xda\xd6\x88\x3c\xf3\xf1\x5d\x41\x4b\x27\xb3\xca\x62\x58\x43\x90\xa5\x61\x50\xf4\xe5\x16\xe5\xec\xdb\xd4\x84\xd6\x6d\x49\x41\x60\xbd\x6b\x29\x92\xc3\xe4\x01\x2a\xce\x1c\xba\x29\x0b\x38\x32\x86\x9b\xd8\x05\x69\x4b\x1d\xbe\x0a\x43\x86\x11\xba\x24\x63\x6b\xdf\x4b\xbc\x3b\xbd\xfe\x41\x2d\x98\x32\x2c\xfd\xfd\xed\x87\x5d\x61\xec\x51\xef\xb3\x7e\xd1\xb4\x1d\xf9\xba\xd5\xec\x77\xca\x66\xc7\x08\x5a\x5a\x4c\xc9\x94\x3e\x6d\x01\x51\xb9\xdf\x98\xff\x82\x1c\x0f\x87\xc3\x26\x47\xb5\xeb\xed\x97\x54\x2f\x02\xf3\x22\xb8\xb9\xc0\x77\x36\x6b\x6f\x8f\x26\x74\x6d\xf6\xe8\xa0\x56\xa5\xeb\x29\x9e\xbc\xd3\x7f\x06\x3c\x59\xb3\x4c\xb2\xe2\x72\xc6\xef\x58\x84\x19\xd0\xdb\x7e\xf1\xf1\x22\xe2\x25\x82\xb2\x87\x6d\xcc\x69\xce\xcb\x51\x22\x57\xad\x73\x0d\x9f\x2b\xc8\x7e\x49\xfe\xe6\xab\xb9\xf0\x1a\x08\x94\x98\x43\xe4\x87\xd6\x39\x8e\x69\x2a\x59\xe4\x69\xcb\xca\x6f\x23\x3b\xe6\x7e\x71\x5b\x87\xa7\xb1\xf7\xd4\x40\x7b\x84\x66\x9c\x0e\xd8\x1d\xb4\x9d\x11\x8b\xc6\x9e\xde\x68\xca\xef\xea\xef\x76\x44\x5c\x92\xb2\x30\xa9\x19\x95\x80\xa0\x60\x4c\x66\x03\x3c\x5b\xe8\x5d\x7e\x30\xac\x01\x34\x9f\x53\xb4\x03\x50\x09\xcc\x73\x44\x83\xef\x51\x0e\x34\xd9\x3f\x0f\xd8\x45\x60\x94\x60\x79\x4a\x1b\xba\x99\x66\x20\x56\x2f\x7f\x2d\xfa\xa9\x57\xbc\xc9\x7f\x11\xd0\x16\xdb\x08\xe0\x91\xc5\x64\x78\x54\xea\xa0\x32\x33\xa3\xd7\xc2\x34\x4b\x3d\x5b\x58\x5b\xc5\x35\xde\x0a\x20\xf8\xd3\xa5\xd4\x98\x17\x30\x14\xdc\x78\x0d\xb8\x61\x85\xe5\x62\xbe\x15\x4b\xbd\x92\x8b\x20\xe6\x36\x69\xad\x62\xa7\x85\x36\x6e\x5d\x04\xc0\x58\xfd\x65\xe3\x42\x06\xe1\xa6\xfb\x87\x08\xf0\xbd\x5c\xcc\x1a\xfe\x5c\x08\xb0\x3c\x9a\x72\xd9\x78\xeb\xdc\xbc\x69\x1e\x8c\xfc\xd1\xc8\x3f\x29\xde\x3b\x3f\xf0\xc5\x7e\xd7\x9f\x56\xb8\x6e\xfe\xb2\xc2\x2e\x0d\xb0\xa7\x32\x12\x41\x84\xd2\x3f\x65\xf1\xdf\x00\x00\x00\xff\xff\xd1\xce\x51\x06\xdf\x42\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 17119, mode: os.FileMode(436), modTime: time.Unix(1449583702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

