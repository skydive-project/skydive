// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x3b\xff\x6f\xdb\x36\xf6\xbf\x7f\xfe\x0a\x56\xed\x67\x76\xd0\x5a\x4a\xd3\x76\x37\x78\x71\x80\xdb\x56\xdc\xfa\xc3\x6d\x05\xd6\xe1\xee\x66\xe4\x06\x5a\xa2\x6d\x26\xb2\xa8\x89\xb4\x13\xaf\xcb\xff\x7e\xef\x91\xa2\x24\xcb\xa2\x4c\x3b\xdd\x6d\x38\x62\x58\x2d\x89\xef\xfb\xe3\xfb\xc2\x90\x04\xc6\xe5\x93\x6f\xbe\xff\xfa\xc3\xbf\xde\xbf\x25\x4b\xb5\x4a\xaf\xfe\x4f\xbf\xc3\x9f\x24\xa5\xd9\x62\x12\xb0\x2c\xb0\x2f\x19\x4d\xcc\x4f\xfd\xb8\x62\x8a\x92\x78\x49\x0b\xc9\xd4\x24\x58\xab\xf9\xe8\x8b\x20\x6a\x7f\x5f\x2a\x95\x8f\xd8\x2f\x6b\xbe\x99\x04\xff\x1c\xfd\xf8\xd7\xd1\xd7\x62\x95\x53\xc5\x67\x29\x0b\x48\x2c\x32\xc5\x32\x00\x7e\xf7\x76\xc2\x92\x05\xdb\x07\xcf\xe8\x8a\x4d\x82\x0d\x67\x77\xb9\x28\x54\x03\xe2\x8e\x27\x6a\x39\x49\xd8\x86\xc7\x6c\xa4\x1f\x5e\x10\x9e\x71\xc5\x69\x3a\x92\x31\x4d\xd9\xe4\xe5\x0e\x36\xc5\x55\xca\xae\x7e\xb8\xdd\x26\x7c\xc3\x48\x2a\x60\x0a\x51\x22\x17\xa9\x58\x6c\x2f\x23\xf3\xb5\x9e\x9d\xf2\xec\x96\x2c\x0b\x36\x9f\x04\x28\x80\x1c\x47\xd1\x8a\xde\xc7\x49\x16\xce\x84\x50\x52\x15\x34\xc7\x87\x58\xac\xa2\xea\x45\xf4\x2a\x7c\x15\xbe\x89\x62\x29\xeb\x77\xe1\x8a\xc3\x2c\x29\x03\x52\xb0\x74\x12\x48\xb5\x4d\x99\x5c\x32\xa6\x90\xb7\x9a\x9c\x8c\x0b\x9e\x2b\x22\x8b\xd8\xd0\x03\x72\xb1\x48\x58\x78\xf3\xcb\x9a\x15\x5b\x4d\xc6\xfc\x1c\x5d\x84\x2f\xc3\xd7\x1a\xeb\x8d\x0c\xae\x2e\x23\x03\x79\xe5\x46\x85\xac\x03\xab\x37\x32\x8c\x53\xb1\x4e\xe6\x29\x2d\x98\x46\x48\x6f\xe8\x7d\x94\xf2\x99\x8c\xe2\xad\x12\xa0\xb2\x9c\x45\x17\xe1\x9b\xf0\xbc\x7e\x3e\x81\x4e\x58\xd0\xbb\x05\x57\x9a\x42\x9c\x33\x05\x8a\x55\x51\x42\x17\x05\x8b\x36\xe7\xe1\x5f\xc2\xd7\x51\xc2\x65\xf9\xe6\xb1\xe8\x2b\xb6\x6b\x86\x6f\xe4\xc8\x10\x7b\x09\x7a\xba\xa8\x3f\x98\xb7\x2d\x62\xfd\xfa\xef\xd7\xd9\x2f\x8a\xe7\x17\xa0\xaf\x0b\xd0\x57\x69\x25\x7c\xd5\x27\x52\xcb\xa7\x1e\x47\xa3\xd3\xa7\x88\xda\xe6\xb0\x5a\x14\xbb\x57\x91\x9e\x10\x7d\x12\x8d\x22\x51\xcd\xc6\x9b\x86\x42\x35\x27\x4e\x7d\x22\x4f\x35\xed\x99\x48\xb6\xe4\x63\xf5\x88\x23\xa7\x49\xc2\xb3\xc5\x08\x96\xe0\x98\xbc\x39\xcf\xef\xbf\xdc\xf9\x3c\xa3\xf1\xed\xa2\x10\xeb\x2c\x19\xc5\xb0\x44\x8b\x31\x79\x3a\x9f\xcf\xeb\x39\x0f\xd5\xaf\xa7\x71\x1b\xb5\x0e\x06\x63\xf2\xf2\xfc\xfc\xff\x77\x91\x2e\x19\x5f\x2c\x55\xd7\x17\xf0\xc9\x3c\xa5\xdb\x31\x99\x41\x60\xb8\xdd\xfd\x96\x0b\x09\x51\x45\x64\x63\x42\x67\x52\xa4\x6b\xc5\xba\xd8\x00\x2d\x18\x99\xdb\x0a\xbf\xda\x41\xb6\xa1\x05\x91\x77\x5c\xc5\xcb\x77\xab\x05\x99\x90\x41\xc3\x12\x17\x21\x87\xe8\x36\xe7\x59\xc2\x0a\x6d\x8e\x84\x2a\x1a\xe1\x3b\x19\xdd\xc1\x5b\x71\x27\x47\x5f\x8c\x20\x2a\x16\x62\xa4\x89\x45\x9f\xbf\x8e\x0c\xb2\x30\xcf\x16\x83\x2f\xf7\x28\x61\xc8\xfc\x44\x74\xe6\xa9\xb8\xfb\x19\x63\xbd\x72\xd0\xe2\x99\x9a\x7f\x22\x5a\x77\xbc\x60\xc9\xcf\x19\x53\x77\xa2\xb8\x2d\xc9\xed\xd1\x8b\xb7\xad\x97\xf3\x75\x16\xa3\x9d\xc8\x82\xa9\xbf\x43\xea\x40\x4a\x72\xc8\xd2\xb3\x96\x7b\xe0\xe0\x73\x32\x7c\x32\x0c\xaa\x69\x01\xb0\x4f\x60\xea\xd9\xde\x4c\x1c\x05\x53\xeb\x22\x23\x41\xd0\xa2\x68\x59\x59\x59\x34\x28\x7c\x4b\x35\x9a\x33\x51\x90\xe1\xad\x21\x31\x6d\x10\xbd\xee\x62\x0d\x47\x8d\xf0\xf9\x84\xdc\x92\xe7\x64\x30\x26\x03\xf8\xa7\x05\x3e\xbd\xbd\x86\x97\xc1\xe5\xac\x88\xae\x82\x7d\xb2\x0f\xfb\xdc\x96\x92\x54\xf8\x77\x81\x1e\x1c\x0a\x5d\xe7\x30\x99\xbd\x4d\xd9\x0a\x32\xaf\x1c\xda\xac\xf9\x02\xf8\x31\xaf\xba\xe4\xd0\xfe\xc7\x58\x01\x8b\x1c\xd4\xf2\xf1\x61\x9f\x3f\x9c\xb1\x5e\xf3\xe4\x83\x78\x97\xf4\x4c\x99\x15\x1c\x2a\x03\x79\x18\x09\x38\x60\x39\xa9\x73\xd6\x52\x48\x85\xd5\x04\xcc\xb1\x12\x4c\x83\x6f\xe1\x65\x70\xdd\x01\x61\x45\x9b\x06\x19\x24\x62\x50\x76\x98\xaf\xe5\x72\xf8\x11\xd5\x36\x26\x1f\x79\x32\xae\x10\xbe\x80\x3a\x69\xc6\xd2\xe6\x0b\xbe\x5a\x80\xc5\x32\x91\xb1\xc1\xc3\xc3\x59\x07\xfa\x28\x22\x73\x5e\x48\x05\xac\x90\x04\x22\x30\xa1\x29\x94\x23\x4b\x46\x34\xb5\x6e\x0f\xaa\x95\xf1\x1d\x8a\x01\xee\x54\xcb\xf1\xfd\x46\x7e\x65\xf4\xe4\xf6\x2a\x03\xab\x75\x5d\xe9\x02\x5c\x6b\x24\x36\x72\x84\xde\x55\xe3\xee\x60\xb8\x46\xf0\x95\xb8\xd7\x38\x06\x00\x57\xda\x66\x26\xee\x7f\xae\x31\xbc\x4b\xf6\xcd\xe4\xa1\xd2\x4e\x18\x3b\x50\xdf\x0d\xf2\x2f\x7a\x27\x97\xe6\x08\x82\xfe\x69\x39\x64\xdc\x4c\x35\xcc\xd6\xcf\x41\x6d\xd2\xce\x79\xdd\x76\xc6\x71\xaa\xdc\xb5\xcc\x7d\x02\x97\xc2\xd6\xc6\x73\x4f\xb5\x02\x7b\x29\x52\xcb\x5b\xa5\xaa\x23\x45\xc6\xc4\x23\x77\x16\x5a\xd3\x41\xa7\x35\xb3\xd7\xd3\xe0\x3d\xce\x0d\xae\x3b\xf1\x54\x7e\x8f\x08\xad\xd7\x6b\xe4\x2e\x27\xb7\xd4\xb5\x8b\x56\x1e\xff\xbc\x42\xe0\x60\x18\xc7\x63\xfd\xd3\x90\xf5\x72\x4d\xcb\x8d\x9f\x83\x7a\x3b\xbe\xb6\x59\x99\xf4\xfb\x67\x56\x19\x60\xbc\x9b\x2e\xb5\x6e\xa7\x96\xbd\xeb\xee\x7c\x88\xc3\x6d\x7b\x1c\x10\xde\x0c\xd3\x18\xdf\x10\x9b\x87\xd2\x99\x71\x8e\x93\x82\x82\x36\xf1\x60\x74\x35\x28\x2d\x7d\x48\x51\x52\xac\x8b\x98\xf9\x2c\x2f\x1c\x8a\x16\xa0\x24\x3f\x03\xeb\x22\x06\x62\x0f\x54\x8a\x3c\x39\x10\x80\x50\xe2\x7f\x98\x62\xf5\xf5\xe1\x99\x5f\x9b\x3a\x38\x78\xfa\xea\xd5\xab\xe0\x44\xbb\x60\x91\x86\xeb\xb2\x65\xe6\x69\x00\xc9\x93\x15\x73\x1a\x33\xd7\x4a\xc4\x51\xad\x46\x44\x63\x57\xa3\x46\xd9\xb7\x1a\x2d\x5d\xbd\x22\xcb\xa5\xf9\xbc\x42\xd1\xc3\x2c\x0e\x4c\xed\x00\xa6\x89\x4c\x2d\x0c\xf0\xfb\xe3\x8f\xef\xbe\xc1\xbc\x7d\x08\x16\x6b\x8b\x29\xfe\xb8\x2e\xb1\xb8\x92\x53\x0b\x08\x66\xee\x80\x35\x88\x1f\xe0\xf8\x31\x51\x04\x07\x3a\xb5\x61\xb4\xdf\x25\x70\x94\xd1\xc4\xb2\x76\x18\xe0\xe8\x88\xa2\x39\xc2\xa8\x52\x96\xf7\x87\x67\xbb\x22\x4b\x4b\x8b\xee\xc8\x82\xa3\xdf\x8b\x71\x40\x84\x41\x5f\xc2\xf8\x82\x38\x3d\x4d\x72\x7c\x8c\xc1\x51\x07\xf7\x3a\xca\xf8\x9a\xc8\x46\x1a\x9f\xd8\x81\xc3\xc6\x1a\x6f\xfc\x47\xc4\x1b\x1c\xfe\x31\xc7\xce\xf6\x8b\x3b\x38\xbc\xac\x36\x5b\xf3\x34\xd1\xa5\xae\xed\x0e\x56\x34\xcf\xf1\x5f\x0c\x2f\xf8\x7e\x2e\x52\x68\x36\xf1\x8d\x36\x97\xde\xf2\x2b\xd6\xb1\x3b\x87\xe0\xc0\x8e\x2e\x78\x0f\x18\x83\x2a\x28\xd5\xce\x46\x3e\xfb\x6c\x3f\x84\xe8\xc9\xce\x62\xb9\x39\x90\x51\x0c\x38\x5d\x81\xc8\x60\x39\xec\x42\xba\xe1\xd4\xd1\x0c\x2b\x18\x23\xf9\x19\xf2\xf5\x64\x58\xa1\x6f\x7c\xe9\x5f\x1e\x4d\xc6\x60\x76\x15\xa9\x2c\xa6\xfe\x10\xf7\xe0\x4e\x1e\xdd\x65\x9e\x4f\x67\x59\xe5\x86\x4c\xee\x77\x27\xdf\x31\xf5\x9d\xec\xe9\x4c\x0c\x5c\xbb\x33\x31\x98\x1c\x1e\x05\x9e\x24\x6f\x79\x4e\x32\xa6\x32\x49\xa0\x4c\x5d\x12\x91\xa5\x5b\xf8\x1f\xd2\x2e\x93\x19\x04\x23\x9a\xa1\x23\xe9\x4f\xe8\x5b\xa9\x10\x39\xee\x2d\x75\xe2\x44\x23\x7d\x3f\xbb\x61\xb1\x0a\x6f\xd9\xb6\x6e\x74\x6b\x01\xa6\x86\xa7\x56\xc2\x3c\x0b\x53\x96\x2d\x80\x83\x4b\x72\xd1\xe7\x4f\xe8\xc8\x3c\x5b\xb3\x6e\xf3\x74\x28\xb5\x14\x14\xf8\xca\x84\x22\x85\x80\xff\x19\x79\x4d\xcb\x48\xa0\xef\x72\xea\xd3\x84\xfa\x1d\x9d\x76\xd3\x45\xa9\x4b\xa3\x3d\x99\x90\x00\xa9\x04\x7d\x52\x3c\xb6\x4c\x46\x43\x7b\x15\xc9\x86\x29\xef\xae\xec\xb8\x66\xaf\xbf\x80\xea\xc7\xa2\x95\x8a\x62\x1c\x65\x48\x5b\x7b\xf9\x7a\x55\x7f\x43\x74\x54\x09\x56\x95\x5f\x7a\x91\x35\x8b\x2f\x17\xc4\xa1\xba\xab\xaf\x6d\xb4\x95\xd6\x6a\xe1\xc6\x8f\x4e\xb7\x87\xfc\xc3\x36\x67\x01\xc4\x31\xf0\x42\x53\xa0\xf4\xfa\x61\x4d\xad\xea\x52\x7d\xb3\x4f\xd9\x9b\x34\xe2\x44\x6f\x0a\xf2\xcb\x40\x25\xd2\x3d\xa5\x1d\x4e\x5b\x0d\xab\xa3\x39\x0d\x22\x9f\xc4\xa4\xbd\x21\x5e\x82\x48\xd6\x15\x0c\x6c\x2b\x3c\x79\x60\xc2\xa1\x11\x95\x79\xae\x0b\xcf\xb4\xa2\x54\x39\x82\x17\x5e\x93\xfb\x6a\xec\x15\x9b\xd2\x33\xcd\xe1\x28\x21\xa6\x15\x1a\xcc\x77\xe8\xa5\xfd\xb9\x0e\x87\x3b\xdf\xf5\x7f\x75\xac\x63\x1c\x8f\x8d\x81\x3e\xd5\xdd\x51\xc5\xbd\x0d\x6f\x36\x40\x79\x44\x4d\x7e\xea\x1e\x81\x77\x25\x7f\x70\x8f\x00\x3c\x83\xa6\x05\xa3\xc9\x16\x9d\x42\x6c\x24\xa1\x49\x02\x79\x2d\x11\x4a\xb1\x84\xe8\x3f\x98\x49\x9e\xc1\x02\x55\x4b\x2e\x09\xfc\x87\x8b\x53\x1a\x5f\xb7\x6b\x57\x2d\xa9\x82\x4f\xbd\x74\x32\x42\x0d\xfe\x72\x91\xd2\x4c\xd7\x61\xd4\xa4\xd3\xde\x28\x65\x6b\x36\xdb\x4d\x1e\x5a\x4d\x9f\xa2\xd9\xd0\x34\xab\x56\x03\x9f\xfc\x1b\x8d\xdd\xae\xf7\xf7\x6b\x38\x8c\x8d\x8e\xeb\x38\x3e\x3f\xb2\xe3\x38\x3f\x3f\xf7\xe8\x38\x9c\x1f\x7b\xb3\xdb\x51\x3b\x03\x8f\xda\x15\xf8\x7d\x9a\x9e\xdf\xab\xe1\x79\x64\xb3\x63\x82\xfd\x69\x2d\xcd\xf1\xed\xcc\x23\x1a\x16\xb0\x0a\xfe\x15\x52\x2b\xb9\xd4\x39\xda\xa2\x65\x1f\x77\x9f\xb3\xd7\xcb\x75\xab\xd5\x2c\x4b\x5d\x7c\xed\x7a\x5d\xb7\x50\x66\x35\xee\x4e\xdf\x51\x8b\x03\xee\xd4\xa8\x83\xd1\xa6\x62\xb1\x8a\x38\x96\x0b\xf7\x72\xb5\xd1\xc6\xc2\xba\x67\xda\xf8\xe2\x81\xd3\x46\x16\x2a\x97\xbd\x91\xc5\x6f\x0f\xc3\x6f\xef\xa2\x33\x82\x38\xdd\xa5\xed\x2d\xf6\x6f\x93\xde\xde\x62\x0b\x1f\x87\x49\x6c\xc2\x69\xc6\x9a\xaa\x2e\xc6\xee\x6c\xc3\xd4\xb2\xb7\x2a\xee\xf2\x37\x5b\x3b\xf5\x39\x10\x8e\x2e\xe7\xeb\xf1\xd5\x07\xf0\x3a\xc9\x7a\x78\xe9\xc2\xe7\xcb\x8b\x7b\xdd\x1c\xd5\x74\xfd\x2f\xad\x8b\x43\x5b\x7c\xff\x85\x65\xb1\xfb\xb4\xf3\x58\x9d\x16\xc0\xbd\x89\xba\x58\x8c\x0f\x1c\x13\xd0\x2b\x84\x9b\xb3\x11\xad\x9a\x1a\xa7\x77\x32\x87\xdf\xc1\x2f\xf6\x00\xa6\x1c\x16\x0b\x92\x75\x76\xa8\xe5\xb9\x8f\xd5\xce\xb9\x0f\x84\x3e\x23\xbf\xfd\x46\x9e\xe0\xaf\x69\xe3\x6b\x4f\x6d\x5b\xef\xe5\x74\x4e\x89\xb7\xe1\xb3\xe1\xe0\x29\x3a\x0d\x22\x0d\x79\x72\xa6\xcf\x6e\x0d\xfb\x77\x87\x74\x0d\xdf\x9f\x9f\xf5\x49\xc5\x31\x19\x54\x2a\x3e\xb0\xf1\x81\x87\xc1\xc6\x64\x4f\x32\x77\x4a\x3d\xe8\x88\xfd\xfc\xc5\x29\x95\x92\x41\xcf\x30\x40\x79\x47\xd5\x49\xc8\xee\xbf\x9a\x6b\x8a\xdd\x1e\xf8\x28\x07\xfc\x50\x6e\xb2\x0c\x51\x5c\xd7\xf1\x14\xeb\x40\x78\x6a\xc4\xe9\x68\x20\xc9\xd4\x51\x46\xeb\x90\x82\x9f\xf7\x19\xed\x70\x0b\xed\xe9\xd5\xf6\x26\xf8\x1d\xb2\x06\xc1\xdd\x70\xca\x99\xd3\xdd\x5a\xc7\x6f\xf6\xc1\xa6\x16\xeb\x75\x63\xad\x75\x70\x10\x6f\x41\xd2\xea\x04\x9f\xc3\x15\x75\x3b\x36\xae\xb4\x39\xec\x4b\x36\xe6\x04\x57\xa8\xf1\x62\x87\xd6\x53\x04\xef\x46\x05\x9c\xbc\xc3\x6b\x17\x88\xc3\x13\x71\x9d\x50\x9e\x31\x08\x60\x89\x88\xd7\x88\x21\x84\x08\x5a\xea\xe7\xab\xed\xbb\x64\x38\x88\xb7\x83\xb3\x6e\xe8\x9c\x66\xe0\xc1\xe4\x5e\x9f\x02\x7c\x41\x40\xd2\x73\x17\xa1\x15\xcf\x7e\x12\x62\x05\x33\xc2\x0b\xc7\x0c\x7a\x6f\x66\xbc\xec\xfe\xfe\x2b\x7c\x84\xb2\xe0\x6d\x46\x67\x29\x83\x8c\x02\xe5\x83\xa3\x8f\x5f\x4b\x56\xfc\xe4\x3d\x1b\x84\xc8\xfc\xf1\xbe\xf7\x9e\x3d\x13\xf7\x3f\x80\x51\xb4\xe1\x3d\xa6\x97\xf1\x60\xea\x34\x7a\x7f\xa4\x90\x9a\x14\x26\xa2\x01\x2e\xb4\x03\x71\xcc\x2b\xf8\xe0\x18\xb4\xcf\x8e\xe2\xe1\x39\x3c\x3d\x7a\x80\x80\x86\xd5\x9b\x2e\x08\x80\x7e\x3a\xd4\x4f\x67\x3e\x70\x72\x09\x2b\x0a\xe1\x0a\x10\x89\x66\x8b\xf4\x90\x38\x6d\x4e\xf9\x8a\x2e\x58\x45\x98\xaf\x16\x47\x92\x45\x24\x47\xd1\x9e\xc3\x32\x1a\x49\xfe\x2b\x82\x5f\x5c\x9c\xba\x45\xe6\x26\xe4\x6d\xfb\x29\x08\xfb\x64\x12\xe0\x1e\x7e\x70\xfd\xc9\x9c\x40\x1f\x02\x06\xd1\x3e\xf7\xf8\x2b\xe7\xc0\x1c\x0c\xd6\xb3\xff\x40\x45\x3c\xd3\x75\xcd\x15\xf1\x58\x0c\xb1\x94\x5e\x5a\x68\x9c\xb2\x46\x2f\x79\x79\x9e\xdf\xfb\xf8\x86\x05\x4b\xd9\x5c\x9d\x02\x37\x13\x4a\x89\xd5\x29\x90\x45\x69\x08\x6f\x40\x2c\x6f\x46\x1b\x9a\xf2\x45\x86\x60\x28\xa8\x2f\xd4\xb2\x82\x8a\x19\xee\x26\x1e\xb9\x62\xeb\xd8\x42\x29\x7d\xcc\x62\xfd\x23\xd7\xde\xbf\xcd\x86\xf1\xa1\x75\x77\xaa\xbf\xbd\x39\xd1\xdf\x8e\x84\x6b\xf8\xdb\x91\x90\xb5\xbf\x79\x02\xfe\x19\xfc\x8d\x31\xaf\x08\xff\x27\xf4\x37\xac\x98\x3f\x79\x88\x37\x29\xb3\xea\x7e\xbd\x12\x67\x0a\x05\x64\xad\xd1\x0a\x81\x6e\x8c\xfd\x11\x68\x5e\x2b\x04\xfa\xc9\x0b\xd8\xf4\xfc\x23\x5a\x14\xe2\xae\x61\x57\xe8\xc6\x4f\x36\x4e\xe7\x17\x47\xdf\x92\xd2\xad\x58\xf7\x36\x9a\xd8\x4c\x68\xb1\x16\x85\xeb\xb8\xb3\xa3\x25\x2a\x4b\xfa\x71\xf5\x6b\xbf\x37\x3a\xdb\xbb\x75\xb0\xf3\xfc\x6c\x68\xcb\xfa\xb3\x50\x37\x23\xc3\xde\x5e\xe4\x59\x88\x17\xa6\x1c\xcd\xcc\xba\x48\x41\x8c\xa8\xc8\xe3\xc8\xfe\xd9\xdd\x61\x9f\x43\x1b\x42\xd0\xbd\xad\x28\xe8\x6c\x70\x23\x45\x76\x9c\x4a\xc0\xca\x85\x47\x43\xe5\x00\x47\xc6\x70\x03\xd0\x92\x76\x94\xe2\xeb\x38\x66\x18\xa4\x2b\x32\xae\xc6\xb7\xc2\xbb\xd7\x25\x1f\xd5\x85\x29\xc3\xd2\xdf\xde\x7e\xd8\x57\xc6\x9e\x85\x1b\xcf\xbb\xf7\xe2\x2e\x23\x73\xa5\xd4\x3c\xe0\x35\xb1\xc6\x85\xb5\x8c\x6e\xcc\x6e\x02\x14\x87\x74\x33\xc3\x33\x42\xfa\x9f\x11\xcf\x36\xac\x90\xcc\x3e\xce\xf9\x3d\x4b\x30\xe5\x04\xbb\x77\xad\x2e\x13\x5e\x21\xa8\x9a\xc6\xd6\x9c\xf6\xbc\x12\x25\x72\xd5\x39\xd7\xf0\xb9\x86\x74\x93\x95\x97\xed\xcc\x43\xd0\x42\xa0\xc4\x02\x42\x2d\xf4\xaa\x69\x4a\x73\xc9\x92\x40\xdb\xb1\x7c\x8d\xec\x98\xf7\xf6\xb5\x8e\x07\x93\xe0\xa9\x81\x0e\x08\x2d\x38\x1d\xb1\x7b\xe8\xf3\x12\x96\x4c\x82\x39\x4d\x71\xae\x7e\xab\x77\xa1\x45\x5a\x91\x72\x30\xa9\x19\x95\x80\xc0\x32\x26\x8b\x11\x9e\x82\x0a\xae\x3e\x18\xd6\x00\x9a\x2f\x28\xba\x0a\x98\x04\xe6\x79\xa2\xc1\xab\x5b\x23\x4d\xf6\xcf\x03\x76\x19\x19\x23\x38\xbe\xd2\x96\x6d\x66\x05\xa8\x35\x28\x6f\x62\x3e\x0d\xec\x9d\xe0\xcb\x88\x76\xf8\x46\x04\x9f\x1c\x2e\xc3\x93\xca\x06\xb5\x9b\x19\xbb\x5a\xd7\xac\xec\xec\x60\x6d\x9d\x36\x78\xb3\x40\xf0\x4f\x9f\x51\x53\x6e\x61\x28\xac\xf4\x0d\xe0\x06\x09\x2b\x61\xbe\x15\x2b\x2d\xc9\x65\x94\x72\x97\xb6\xd6\xa9\x97\xa0\xad\x57\x97\x11\x30\xd6\xbc\xdf\x68\x75\x10\x6f\xfb\x2f\x33\xe3\x55\x40\x8c\xd1\xe1\x42\x08\xf0\x3c\x9a\x73\xd9\xba\xe8\x6a\x2e\xb7\xe2\x9d\xdd\x97\xe1\x2b\x7b\xd5\xf5\xc8\xcb\xc1\xbe\xd7\xb3\x6f\xda\xb7\xb3\xf7\x69\x80\x3f\x55\x91\x08\x22\x94\xbe\x14\xff\x9f\x00\x00\x00\xff\xff\xd4\x74\xdc\xeb\x29\x3f\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 16169, mode: os.FileMode(436), modTime: time.Unix(1449501856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

