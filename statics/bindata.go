// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x3c\xfd\x6f\xdb\xb6\xb6\xbf\xbf\xbf\x82\x55\xfb\x66\x07\xad\x25\x3b\x69\xda\xce\x8b\x03\xbc\x75\xc5\x5b\x81\xf7\xb6\x02\x6b\x71\xef\x9d\x91\x3b\xd0\x12\x6d\x33\x91\x45\x4d\xa4\x9d\x78\x5d\xfe\xf7\x7b\x0e\xa9\x2f\xcb\xa2\x4c\x27\xdd\xdd\x70\x89\xa2\xb1\x24\x9e\x0f\x9e\xef\x43\x53\x26\x30\x2e\x9e\x7c\xf7\xe3\xdb\x8f\xff\xf8\xf0\x8e\x2c\xd5\x2a\xbe\xfc\x2f\x7d\x0f\x3f\x92\x98\x26\x8b\x89\xc7\x12\xaf\xb8\xc9\x68\x64\x3e\xea\xcb\x15\x53\x94\x84\x4b\x9a\x49\xa6\x26\xde\x5a\xcd\x07\x6f\xbc\xa0\xf9\x7c\xa9\x54\x3a\x60\xbf\xae\xf9\x66\xe2\xfd\x7d\xf0\xe9\x7f\x06\x6f\xc5\x2a\xa5\x8a\xcf\x62\xe6\x91\x50\x24\x8a\x25\x00\xfc\xfe\xdd\x84\x45\x0b\xb6\x0f\x9e\xd0\x15\x9b\x78\x1b\xce\x6e\x53\x91\xa9\x1a\xc4\x2d\x8f\xd4\x72\x12\xb1\x0d\x0f\xd9\x40\x5f\xbc\x20\x3c\xe1\x8a\xd3\x78\x20\x43\x1a\xb3\xc9\x68\x07\x9b\xe2\x2a\x66\x97\x3f\xdd\x6c\x23\xbe\x61\xe4\xa3\x48\x45\x2c\x16\xdb\x8b\xc0\xdc\xaf\xe6\xc5\x3c\xb9\x21\xcb\x8c\xcd\x27\x1e\xb2\x2e\xc7\x41\xb0\xa2\x77\x61\x94\xf8\x33\x21\x94\x54\x19\x4d\xf1\x22\x14\xab\xa0\xbc\x11\x9c\xf9\x67\xfe\x79\x10\x4a\x59\xdd\xf3\x57\x1c\x66\x49\xe9\x91\x8c\xc5\x13\x4f\xaa\x6d\xcc\xe4\x92\x31\x85\x5c\x55\xe4\x64\x98\xf1\x54\x11\x99\x85\x86\x1e\x90\x0b\x45\xc4\xfc\xeb\x5f\xd7\x2c\xdb\x6a\x32\xe6\xe3\xe0\xd4\x1f\xf9\x2f\x35\xd6\x6b\xe9\x5d\x5e\x04\x06\xf2\xd2\x8e\x0a\x59\x07\x56\xaf\xa5\x1f\xc6\x62\x1d\xcd\x63\x9a\x31\x8d\x90\x5e\xd3\xbb\x20\xe6\x33\x19\x84\x5b\x25\x40\x58\x29\x0b\x4e\xfd\x73\x7f\x58\x5d\x3f\x80\x8e\x9f\xd1\xdb\x05\x57\x9a\x42\x98\x32\x05\x82\x55\x41\x44\x17\x19\x0b\x36\x43\xff\xb5\xff\x32\x88\xb8\xcc\xef\x1c\x8b\x7e\x01\x90\x3e\x20\x5f\xae\x67\x6b\xc9\xb2\xdc\x08\x34\x29\x49\xe7\x60\x82\x3c\x09\xe6\xaf\x5e\x9d\x86\x73\xf6\xf2\x3c\x1c\xbd\x66\x74\x14\xbd\x8e\x5e\xbe\x0e\x80\xa7\x60\xf4\x66\xc8\xc2\xe8\xcd\xec\xec\x0d\x3b\x7f\xf5\xf5\xf0\xcd\x8c\x9d\x9d\xd2\xd1\xcb\xaf\x5f\x9d\x0d\x67\xa3\xb3\xf0\xfc\x7c\xc4\xce\xcf\x5f\x9f\x32\x4d\x65\xce\x63\x36\xf2\xd5\x9d\xaa\xf3\xd6\xad\xae\x6e\x11\xff\xaa\x78\x7a\x0a\xe2\x3d\x05\xf1\xe6\x4a\xc5\x5b\x5d\x12\x68\x98\xe0\xe3\x68\xb4\x9a\x20\x51\xdb\x14\xdc\x4a\xb1\x3b\x15\xe8\x09\xc1\x91\xfa\x2d\xed\xa6\xb2\x98\x6b\x39\x40\xa2\x9a\x8d\xf3\xea\xbe\xbe\xd9\x58\x69\x8d\x16\xf2\x54\xd1\x9e\x89\x68\x4b\x3e\x97\x97\x38\x52\x1a\x45\x3c\x59\x0c\x94\x48\xc7\xe4\x7c\x98\xde\x7d\xb3\xf3\x78\x46\xc3\x9b\x45\x26\xd6\x49\x34\x08\xc1\xa3\xb3\x31\x79\x3a\x9f\xcf\xab\x39\xf7\xe5\xa7\xa7\x61\x13\xb5\x8e\x1a\x63\x32\x1a\x0e\xff\x7b\x17\xe9\x92\xf1\xc5\x52\xb5\x3d\x01\x13\x4e\x63\xba\x1d\x93\x59\x2c\xc2\x9b\xdd\x67\xa9\x90\x10\x7e\x44\x32\x26\x74\x26\x45\xbc\x56\xac\x8d\x0d\x90\x82\x59\x73\x53\xe0\x97\x3b\xc8\x36\x34\x23\xf2\x96\xab\x70\xf9\x7e\xb5\x20\x13\xd2\xab\x69\xe2\xd4\xe7\xe0\x01\x73\x9e\x44\x2c\xd3\xea\x88\xa8\xa2\x01\xde\x93\xc1\x2d\xdc\x15\xb7\x72\xf0\x66\x00\xe1\x33\x13\x03\x4d\x2c\x78\xf5\x32\x30\xc8\xfc\x34\x59\xf4\xbe\xd9\xa3\x84\xb1\xf5\x0b\xd1\x99\xc7\xe2\xf6\x17\x4c\x0a\xca\x42\x8b\x27\x6a\xfe\x85\x68\xdd\xf2\x8c\x45\xbf\x24\x4c\xdd\x8a\xec\x26\x27\xb7\x43\x6f\xbe\x4e\x42\x54\x09\x59\x30\xf5\xff\x90\x4e\x10\xa9\xec\xb3\xf8\xa4\x61\x09\x38\xf8\x9c\xf4\x9f\xf4\xbd\x72\x9a\x07\x9c\x12\x98\x7a\xb2\x37\x13\x47\xc6\xd4\x3a\x4b\x88\xe7\x35\x28\x16\xab\x5c\x15\x68\x70\x9d\x0d\x29\x68\xce\x44\x46\xfa\x37\x86\xc4\xb4\x46\xf4\xaa\x8d\x35\x1c\x15\xc2\xe7\x13\x72\x43\x9e\x93\xde\x98\xf4\xe0\x4f\x03\x7c\x7a\x73\x05\x37\xbd\x8b\x59\x16\x5c\x7a\xfb\x64\xef\xf7\xb9\xcd\x57\x52\xe2\xdf\x05\xba\xb7\x08\x74\x9d\xc2\x64\xf6\x2e\x66\x2b\x08\xc4\xb2\xaf\xf2\x7c\xfa\x02\xf8\x31\xb7\xda\xd6\xa1\x4d\x8d\xb1\x0c\xfc\x19\xc4\xf2\xf9\x7e\x9f\x3f\x9c\xb1\x5e\xf3\xe8\xa3\x78\x1f\x75\x4c\x99\x65\x1c\xaa\x05\x79\x18\x09\xd8\x5a\x3e\xa9\x75\xd6\x52\x48\x85\x15\x06\xcc\x29\x56\x30\xf5\xbe\x87\x9b\xde\x55\x0b\x44\xb1\xb4\xa9\x97\x40\x8a\x06\x61\xfb\xe9\x5a\x2e\xfb\x9f\x51\x6c\x63\xf2\x99\x47\xe3\x12\xe1\x0b\xa8\x9d\x66\x2c\xae\xdf\xe0\xab\x05\x68\x2c\x11\x09\xeb\xdd\xdf\x9f\xb4\xa0\x0f\x02\x32\xe7\x99\x54\xc0\x0a\x89\x20\xd8\x12\x1a\xc7\x44\x2d\x19\xd1\xd4\xda\x2d\xa8\x12\xc6\x0f\xb8\x0c\x30\xa7\x6a\x1d\x3f\x6e\xe4\xb7\x46\x4e\x76\xab\x32\xb0\x5a\xd6\xa5\x2c\xc0\xb4\x06\x62\x23\x07\x68\x5d\x15\xee\x16\x86\x2b\x04\xdf\x8a\x3b\x8d\xa3\x07\x70\xb9\x6e\x66\xe2\xee\x97\x0a\xc3\xfb\x68\x5f\x4d\x0e\x22\x6d\x85\x29\x06\xca\xbb\x46\xfe\x45\xe7\xe4\x5c\x1d\x9e\xd7\x3d\x2d\x85\xe4\x9a\xa8\x9a\xda\xba\x39\xa8\x54\xda\x3a\xaf\x5d\xcf\x38\x1e\xba\xee\x6a\xcd\x5d\x0b\xce\x17\x5b\x29\xcf\x3e\xb5\x58\xb0\x93\x20\xf5\x7a\xcb\xac\x64\x9f\x97\xd1\xe4\x06\xb2\xe7\x91\x32\xc1\x24\x24\x77\x3c\xb1\x6e\xc1\xd3\x6a\x35\x57\x53\xef\x03\xce\xf5\xae\x5a\xf1\x94\x8e\x81\x08\x0b\xb7\xd0\xc8\x6d\x5e\x50\x50\xd7\x36\x5c\xba\xc4\xf3\x12\x81\x85\x61\x1c\x8f\x35\x60\x43\xd6\xc9\x76\x0b\x6e\xdc\x2c\xd8\xd9\x33\xb4\x52\xf3\x02\xa0\x7b\x66\x99\x22\xc6\xbb\xf9\x54\xcb\x76\x5a\xb0\x77\xd5\x9e\x30\x71\xd8\x75\x8f\x03\xe2\x9f\x61\x1a\x03\x20\x62\x73\x10\x3a\x33\xc6\xf1\xa0\xa8\xa1\x55\xdc\x1b\x5c\xf6\x72\x4d\x1f\x12\x94\x14\xeb\x2c\x64\x2e\xfe\x87\x43\xd1\x0c\x84\xe4\xa6\x60\x5d\xd0\x40\x70\x82\xaa\x91\x47\x07\x22\x14\xae\xf8\x6f\xa6\x70\x7d\x79\x78\xe6\x5b\x53\x13\x7b\x4f\xcf\xce\xce\xbc\x07\xea\x05\x0b\x36\xf4\xcb\x86\x9a\xa7\x1e\x64\x57\x96\xcd\x69\xc8\x6c\x9e\x88\xa3\xf4\x46\x44\x53\x78\xa3\x46\xd9\xe5\x8d\x05\x5d\xed\x91\xb9\x6b\x3e\x2f\x51\x74\x30\x8b\x03\x73\x3f\x80\x69\x22\xd3\x02\x06\xf8\xfd\xf4\xe9\xfd\x77\x98\xd8\x0f\xc1\x62\xf1\x31\xc5\x0f\x57\x39\x16\x5b\xf6\x6a\x00\xc1\xcc\x1d\xb0\x1a\xf1\x03\x1c\x3f\x26\x8a\xe0\x40\xa3\x36\x8c\x76\x9b\x04\x8e\x3c\x9a\x14\xac\x1d\x06\x38\x3a\xa2\x68\x8e\x30\xaa\xe4\xa5\xfe\xe1\xd9\xb6\xc8\xd2\x90\xa2\x3d\xb2\xe0\xe8\xb6\x62\x1c\x10\x61\xd0\x96\x30\xbe\x20\x4e\x47\x95\x1c\x1f\x63\x70\x54\xc1\xbd\x8a\x32\xae\x2a\x2a\x22\x8d\x4b\xec\xc0\x51\xc4\x1a\x67\xfc\x47\xc4\x1b\x1c\xee\x31\xa7\x98\xed\x16\x77\x70\x38\x69\x6d\xb6\xe6\x71\xa4\x6b\xe1\xa2\x7d\x58\xd1\x34\xc5\xbf\x18\x5e\xf0\xfe\x5c\xc4\xd0\x78\xe2\x1d\xad\x2e\xbd\x4f\x98\xad\x43\x7b\x0e\xc1\x81\x2d\x9f\xf7\x01\x30\x7a\x65\x50\xaa\x8c\x8d\x7c\xf5\xd5\x7e\x08\xd1\x93\xad\xd5\x74\x7d\x20\xa3\x18\x70\xda\x02\x91\xc1\x72\xd8\x84\x74\x47\xaa\xa3\x19\x56\x30\x66\xe5\x27\xc8\xd7\x93\x7e\x89\xbe\xf6\xa4\xdb\x3d\xea\x8c\xc1\xec\x32\x52\x15\x98\xba\x43\xdc\xbd\x3d\x79\xb4\x97\x79\x2e\xad\x67\x99\x1b\x12\xb9\xdf\xbe\xfc\xc0\xd4\x0f\xb2\xa3\x75\x31\x70\xcd\xd6\xc5\x60\xb2\x58\x14\x58\x92\xbc\xe1\x29\x49\x98\x4a\x24\x81\x3a\x76\x49\x44\x12\x6f\xe1\x3f\xa4\x9d\x27\x33\x08\x46\x34\x41\x43\xd2\x8f\xd0\xb6\x62\x21\x52\xdc\x67\x6a\xc5\x89\x4a\xfa\x71\x76\xcd\x42\xe5\xdf\xb0\x6d\xd5\x09\x57\x0b\x98\x1a\x9e\x1a\x09\xf3\xc4\x8f\x59\xb2\x00\x0e\x2e\xc8\x69\x97\x3d\xa1\x21\xf3\x64\xcd\xda\xd5\xd3\x22\xd4\x7c\xa1\xc0\x57\x22\x14\xc9\x04\xfc\x67\xd6\x6b\x7a\x4a\x02\x8d\x99\x55\x9e\x26\xd4\xef\xc8\xb4\x9d\x2e\xae\x3a\x57\xda\x93\x09\xf1\x90\x8a\xd7\xb5\x8a\xc7\x96\xc9\xa8\x68\xa7\x22\xd9\x30\xe5\xdc\xb6\x1d\xd7\x0d\x76\x17\x50\xdd\x58\xb4\x50\x71\x19\x47\x29\xb2\xa8\xbd\x5c\xad\xaa\xbb\x21\x3a\xaa\x04\x2b\xcb\x2f\xed\x64\xf5\xe2\xcb\x06\x71\xa8\xee\xea\xea\x2b\x8b\x4a\x6b\xb5\xb0\xe3\x47\xa3\xdb\x43\xfe\x71\x9b\x32\x0f\xe2\x18\x58\xa1\x29\x50\x3a\xed\xb0\xa2\x56\xb6\xb1\xae\xd9\x27\xef\x4d\x6a\x71\xa2\x33\x05\xb9\x65\xa0\x1c\xe9\x9e\xd0\x0e\xa7\xad\x9a\xd6\x51\x9d\x06\x91\x4b\x62\xd2\xd6\x10\x2e\x61\x49\x85\x29\x18\xd8\x46\x78\x72\xc0\x84\x43\x23\xca\xf3\x5c\x1b\x9e\x69\x49\xa9\x34\x04\x27\xbc\x26\xf7\x55\xd8\x4b\x36\xa5\x63\x9a\xc3\x91\x43\x4c\x4b\x34\x98\xef\xd0\x4a\xbb\x73\x1d\x0e\x7b\xbe\xeb\x7e\x6a\xf1\x63\x1c\x8f\x8d\x81\x2e\xd5\xdd\x51\xc5\x7d\x11\xde\x8a\x00\xe5\x10\x35\xf9\x43\xf7\x08\x9c\x2b\xf9\x83\x7b\x04\x60\x19\x34\xce\x18\x8d\xb6\x68\x14\x62\x23\x09\x8d\x22\xc8\x6b\x91\x50\x8a\x45\x44\x7f\x79\x26\x79\x02\x0e\xaa\x96\x5c\x12\xf8\x87\xce\x29\x8d\xad\x17\xbe\xab\x96\x54\xc1\xa3\x4e\x3a\x09\xa1\x06\x7f\xee\xa4\x34\xd1\x75\x18\x35\xe9\xb4\x33\x4a\x15\x35\x5b\xd1\x4d\x1e\xf2\xa6\x2f\xd1\x6c\x68\x9a\x65\xab\x81\x57\xee\x8d\xc6\x6e\xd7\xfb\xc7\x35\x1c\x46\x47\xc7\x75\x1c\xaf\x8e\xec\x38\x86\xc3\xa1\x43\xc7\x61\x7d\xd8\x99\xdd\x8e\xda\x19\x78\xd4\xae\xc0\x1f\xd3\xf4\xfc\x51\x0d\xcf\x23\x9b\x1d\x13\xec\x1f\xd6\xd2\x1c\xdf\xce\x3c\xa2\x61\x01\xad\xe0\x37\x92\x5a\xc8\xb9\xcc\x51\x17\x0d\xfd\xd8\xfb\x9c\xbd\x5e\xae\x5d\xac\xc6\x2d\x75\xf1\xb5\x6b\x75\xed\x8b\x32\xde\xb8\x3b\x7d\x47\x2c\x16\xb8\x87\x46\x1d\x8c\x36\x25\x8b\x65\xc4\x29\xb8\xb0\xbb\x6b\x11\x6d\x0a\x58\xfb\xcc\x22\xbe\x38\xe0\x2c\x22\x0b\x95\xcb\xce\xc8\xe2\xb6\x87\xe1\xb6\x77\xd1\x1a\x41\xac\xe6\xd2\xb4\x96\xe2\xcb\x4b\x67\x6b\x29\x0a\x1f\x8b\x4a\x8a\x84\x53\x8f\x35\x65\x5d\x8c\xdd\xd9\x86\xa9\x65\x67\x55\xdc\x66\x6f\x45\xed\xd4\x65\x40\x38\xda\x8c\xaf\xc3\x56\xef\xc1\xea\x24\xeb\xe0\xa5\x0d\x9f\x2b\x2f\x76\xbf\x39\xaa\xe9\xfa\x4f\xf2\x8b\x43\x5b\x7c\xff\x06\xb7\xd8\xbd\xda\xb9\x2c\x8f\x13\xe0\xde\x44\x55\x2c\x86\x07\xce\x11\x68\x0f\xe1\xe6\xf0\x44\xa3\xa6\xc6\xe9\xad\xcc\xe1\x73\xb0\x8b\x3d\x80\x29\x07\x67\x41\xb2\xd6\x0e\x35\x3f\x18\xb2\xda\x39\x18\x82\xd0\x27\xe4\xf7\xdf\xc9\x13\xfc\x34\xad\x3d\xed\xa8\x6d\xab\xbd\x9c\xd6\x29\xe1\xd6\x7f\xd6\xef\x3d\x45\xa3\x41\xa4\x3e\x8f\x4e\xf4\x39\xae\x7e\xf7\xee\x90\xae\xe1\xbb\xf3\xb3\x3e\xe4\x38\x26\xbd\x52\xc4\x07\x36\x3e\xf0\x60\xd8\x98\xec\xad\xcc\x9e\x52\x0f\x1a\x62\x37\x7f\x61\x4c\xa5\x64\xd0\x33\xf4\x70\xbd\x83\xf2\x10\x65\xfb\xd7\xea\x9a\x62\xbb\x05\x1e\x6b\x80\x18\x66\x81\xb6\xfa\xa4\x8f\xb3\xb4\x1d\x28\x29\x4d\x74\x49\xe5\xdb\x25\x4d\x16\x2c\xea\xa3\x38\xac\x76\x59\x6e\x46\x82\x95\xe0\x44\x08\xc5\x66\xf3\x86\x77\xf5\xd5\xc5\x06\x0f\x70\xb0\x0f\x34\x2d\x70\x5a\x62\x9f\xb1\xd0\x3a\xe1\xda\x9a\xb4\x95\xd6\xae\x2b\x64\x98\x1c\xaa\x8d\xa5\xff\x2b\xa7\x74\xd7\x7b\xed\xa8\x6c\x98\xec\xc1\x3a\x3f\x77\x04\xd9\xd1\xba\xb7\xb9\x7f\x67\xef\x56\x8e\x65\x4e\x21\xab\x74\x9e\x5c\x42\x4d\x87\x5b\x8b\x6e\x31\xfc\x14\x47\x82\xad\xda\x45\x0c\x45\xf8\x40\x43\xb1\x86\x19\xb0\xe3\xa9\xa5\x89\xd2\x09\x05\x1f\xef\xaf\xad\x25\x28\xa0\x5e\x9b\x66\xd7\x55\x05\xe0\xa9\x4e\x31\x87\x65\x82\x66\x21\xef\xaf\x93\x88\xcd\x79\x02\x65\x51\x47\x48\xda\xfa\xc0\xb0\xca\xc4\xb6\xdf\xe6\x3b\x5d\xd9\xda\x88\xde\xa9\x10\x72\x71\x8c\x56\x1a\x8d\x63\x66\x5d\xae\x51\x4b\x19\x2d\xa2\x0c\xd1\xb3\xca\x43\xa9\x96\x88\xaa\x77\x15\xc6\xa5\x59\xf4\xbb\xdc\xc0\x1c\x4a\xf4\x35\x5e\xdc\x68\xe8\xe8\xe5\x76\x93\x1b\x4e\xde\xe1\xb5\x0d\xc4\x12\x50\x31\xdc\x53\xd0\x28\xe4\xe1\x48\x84\x6b\xc4\xe0\x43\x21\x90\xcb\xe7\xdb\xed\xfb\xa8\xdf\x0b\xb7\xbd\x93\x76\xe8\x94\x26\x10\x88\xc9\x9d\x3e\xd8\xfa\x82\xc0\x4a\x87\x36\x42\x2b\x9e\xfc\x2c\xc4\x0a\x66\xf8\xa7\x96\x19\xf4\xce\xcc\x18\xb5\x3f\xff\x0d\x1e\x42\x75\xfb\x2e\xa1\xb3\x98\x41\x61\x84\x7e\xde\x3e\x13\x4f\x74\xff\xec\x3c\x1b\x16\x91\xb8\xe3\xfd\xe0\x3c\x7b\x26\xee\x7e\x02\xa5\x68\xc5\x3b\x4c\xcf\xd3\xda\xd4\xaa\xf4\xee\x84\x27\x35\x29\xac\xa7\x7a\x18\x31\x0e\xa4\x63\xa7\x1c\x8a\xa3\xd7\x3c\x0e\x8d\x87\x44\xf1\x40\xf4\x01\x02\x1a\x56\xef\x1d\x22\x00\xda\x69\x5f\x5f\x9d\xb8\xc0\xc9\x25\x78\x14\xc2\x65\xb0\x24\x88\x54\xf1\xa1\xe5\x34\x39\xe5\x2b\xba\x60\x25\x61\xbe\x5a\x1c\x49\x16\x91\x1c\x45\x7b\x0e\x6e\x34\x90\xfc\x37\x04\x3f\x3d\x7d\xe8\x4e\xaf\x9d\x90\xb3\xee\xa7\xb0\xd8\x27\x13\x0f\xbf\x8a\xf2\xae\xbe\x98\x11\xe8\x73\xed\xb0\xb4\x57\x0e\x5f\xd6\xf7\xcc\x59\x77\x3d\xfb\x4f\x14\xc4\x33\x5d\x9e\x5f\x12\x07\x67\x08\xa5\x74\x92\x42\xed\xc5\x01\xb4\x92\xd1\x30\xbd\x73\xb1\x8d\x02\x2c\x66\x73\xf5\x10\xb8\x99\x50\x4a\xac\x1e\x02\x99\xe5\x8a\x70\x06\xc4\x2a\x7d\xb0\xa1\x31\x5f\x24\x08\x86\x0b\x75\x85\x5a\x96\x50\x21\xc3\x4d\xf1\x23\x3d\xb6\x8a\x2d\x94\xd2\xc7\x38\xeb\x9f\xe9\x7b\xff\x34\xdf\x7b\x1c\xf2\xbb\x87\xda\xdb\xf9\x03\xed\xed\x48\xb8\x9a\xbd\x1d\x09\x59\xd9\x9b\x23\xe0\x5f\xc1\xde\x18\x73\x8a\xf0\x7f\x41\x7b\xc3\xd2\xff\x8b\x87\x78\x93\x32\xcb\x4d\x1c\xa7\xc4\x19\x43\x01\x59\x49\xb4\x44\xa0\xf7\x77\xdc\x11\x68\x5e\x4b\x04\xfa\xca\x09\xd8\x6c\x5d\x0d\x68\x96\x89\xdb\x9a\x5e\xcf\xce\xce\x1e\xac\x9c\xd6\x27\x96\x06\x2c\xa6\x5b\xb1\xee\xdc\x2f\xc1\x66\x42\x2f\x6b\x91\xd9\x8e\xf5\x5b\x7a\xbb\xbc\xa4\x1f\x97\x9f\xf6\x5b\xa3\x13\xb7\xb7\x6b\x32\x36\xcf\x98\x5c\x96\x2d\x69\x5b\x23\xf2\xcc\xc7\x17\x00\x2d\x9d\xcc\x3a\x8b\x61\x0d\x41\x96\x86\x41\xd1\x97\x5b\x94\x73\x68\x53\x13\x5a\xb7\x15\x05\x81\xf5\xae\xa5\x48\x8e\x93\x07\xa8\x38\x73\xe8\xa6\x2c\xe0\xc8\x18\x6e\x62\x17\xa4\x2d\x75\xf8\x3a\x0c\x19\x46\xe8\x92\x8c\xad\x7d\x2f\xf1\xee\xf5\xfa\x47\xb5\x60\xca\xb0\xf4\xbf\xef\x3e\xee\x0b\xe3\x80\x7a\x9f\xf5\x8b\xa6\xed\xc4\xd7\xad\x66\xbf\x53\x36\x7b\x46\xd0\xd2\x62\x4a\xa6\xf4\x69\x0b\x88\xca\xfd\xc6\xfc\x17\xe4\x74\x38\x1c\x36\x39\xaa\x5d\xef\xbe\x79\x7a\x11\x98\xb7\xbb\xcd\x05\xbe\x88\x59\x7b\x25\x34\xa1\x1b\xb3\x47\x07\xb5\x2a\xdd\xcc\xf0\xe4\x9d\xfe\x33\xe0\xc9\x86\x65\x92\x15\x97\x73\x7e\xc7\x22\xcc\x80\xde\xee\xdb\x8c\x17\x11\x2f\x11\x94\x3d\x6c\x63\x4e\x73\x5e\x8e\x12\xb9\x6a\x9d\x6b\xf8\x5c\x43\xf6\x4b\xf2\xd7\x59\xcd\x85\xd7\x40\xa0\xc4\x02\x22\x3f\xb4\xce\x71\x4c\x53\xc9\x22\x4f\x5b\x56\x7e\x1b\xd9\x31\xf7\x8b\xdb\x3a\x3c\x4d\xbc\xa7\x06\xda\x23\x34\xe3\x74\xc0\xee\xa0\xed\x8c\x58\x34\xf1\xf4\x46\x53\x7e\x57\x7f\xb7\x23\xe2\x92\x94\x85\x49\xcd\xa8\x04\x04\x05\x63\x32\x1b\xe0\xd9\x42\xef\xf2\xa3\x61\x0d\xa0\xf9\x82\xa2\x1d\x80\x4a\x60\x9e\x23\x1a\x7c\x39\x72\xa0\xc9\xfe\x75\xc0\x2e\x02\xa3\x04\xcb\x53\xda\xd0\xcd\x2c\x03\xb1\x7a\xf9\xbb\xce\x4f\xbd\xe2\xf5\xfc\x8b\x80\xb6\xd8\x46\x00\x8f\x2c\x26\xc3\xa3\x52\x07\x95\x99\x19\xbd\x16\xa6\x59\xea\xd9\xc2\xda\x3a\xae\xf1\x56\x00\xc1\x9f\x2e\xa5\xc6\xbc\x80\xa1\xe0\xc6\x1b\xc0\x0d\x2b\x2c\x17\xf3\xbd\x58\xe9\x95\x5c\x04\x31\xb7\x49\x6b\x1d\x3b\x2d\xb4\x71\xeb\x22\x00\xc6\xea\x6f\x10\x17\x32\x08\xb7\xdd\xbf\x2e\x80\x2f\xdb\x62\xd6\xf0\x17\x42\x80\xe5\xd1\x94\xcb\xc6\xab\xe4\xe6\xf5\xf1\x60\xe4\x8f\x46\xfe\x59\xf1\x32\xf9\x91\x6f\xeb\xbb\xfe\x5e\xc2\x75\xf3\xe7\x12\xf6\x69\x80\x3d\x95\x91\x08\x22\x94\xfe\x7d\x8a\x7f\x05\x00\x00\xff\xff\x5f\x2a\x31\xff\xb4\x42\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 17076, mode: os.FileMode(436), modTime: time.Unix(1449572426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

