// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x7d\x6f\xdb\x36\x1a\xff\xdb\xfd\x14\xac\xd2\x9b\x6d\x34\x92\xf2\xd2\xee\x06\xc7\x0e\x70\xdb\x8a\x5b\xfe\xb8\xb6\xc0\x52\xdc\xdd\x0c\x5f\x41\x4b\xb4\xcd\x44\x16\x55\x91\x76\xe2\x15\xfe\xee\xf7\x3c\xa4\x48\x51\xb2\x9d\xa4\x6b\x1b\x6c\xb5\x44\x3e\x6f\xfc\x3d\x6f\x14\xa5\xce\xf0\xf9\xaf\xef\x7e\xb9\xfe\xef\xfb\x37\x64\xa1\x96\xd9\xe5\xb3\xce\x10\x7f\x49\x46\xf3\xf9\x28\x60\x79\xa0\x47\x18\x4d\xe1\xb7\x33\x5c\x32\x45\x49\xb2\xa0\xa5\x64\x6a\x14\xac\xd4\x2c\xfc\x29\x88\xeb\x99\x85\x52\x45\xc8\x3e\xad\xf8\x7a\x14\xfc\x27\xfc\xf0\x8f\xf0\x17\xb1\x2c\xa8\xe2\xd3\x8c\x05\x24\x11\xb9\x62\x39\xb0\x5d\xbd\x19\xb1\x74\xce\x7c\xc6\x9c\x2e\xd9\x28\x58\x73\x76\x57\x88\x52\x79\xb4\x77\x3c\x55\x8b\x51\xca\xd6\x3c\x61\xa1\xbe\x39\x26\x3c\xe7\x8a\xd3\x2c\x94\x09\xcd\xd8\xe8\xb4\x92\xa3\xb8\xca\xd8\xe5\xef\xb7\x9b\x94\xaf\x19\xc9\x04\x4c\x12\x25\x0a\x91\x89\xf9\x66\x18\x9b\x59\xa4\xcb\x78\x7e\x4b\x16\x25\x9b\x8d\x02\x34\x57\x0e\xe2\x78\x49\xef\x93\x34\x8f\xa6\x42\x28\xa9\x4a\x5a\xe0\x4d\x22\x96\xb1\x1b\x88\xcf\xa3\xf3\xe8\x75\x9c\x48\x59\x8f\x45\x4b\x0e\x54\x52\x06\xa4\x64\xd9\x28\x90\x6a\x93\x31\xb9\x60\x4c\xa1\x3d\xa8\x48\x26\x25\x2f\x14\x91\x65\x62\x34\x81\xa2\x44\xa4\x2c\xba\xf9\xb4\x62\xe5\x46\x2b\x30\x97\xe1\x59\x74\x1a\xbd\xd2\xf2\x6e\x64\x70\x39\x8c\x0d\xe7\xe5\x3e\x21\x68\x2e\x98\x77\x23\xa3\x24\x13\xab\x74\x96\xd1\x92\x69\x51\xf4\x86\xde\xc7\x19\x9f\xca\x38\xd9\x28\x01\xd0\x14\x2c\x3e\x8b\x5e\x47\x27\xf5\xfd\x17\x69\x88\x4a\x7a\x37\xe7\x4a\xcb\x4e\x0a\xa6\x00\x40\x15\xa7\x74\x5e\xb2\x78\x7d\x12\xfd\x3d\x7a\x15\xa7\x5c\x56\x23\x7f\x5d\xb0\x33\xb5\x36\xf2\x46\x86\x46\xcd\x29\xa0\x72\x56\x4f\x98\xd1\x96\x9a\x43\x38\x3f\x8c\xd0\x27\xc5\x8b\x33\x40\xe7\x0c\xd0\xa9\xbc\x81\x43\xfb\x97\xd1\x8a\x97\xaf\x93\xbe\x37\x5e\x88\xda\x14\x10\xfd\x8a\xdd\xab\x58\x13\xc4\x5f\x89\x1f\xaa\xd3\x06\xbc\xf6\xe0\xd3\x36\xec\x41\x0f\xed\x40\x7d\x53\x91\x6e\xc8\x67\xb8\xe8\x14\x34\x4d\x79\x3e\x0f\x21\x7b\x06\xe4\xf5\x49\x71\x7f\x81\xa3\x53\x9a\xdc\xce\x4b\xb1\xca\xd3\x30\x81\xa4\x2a\x07\xe4\x68\x36\x9b\xe1\xd4\x16\xfe\x3f\x4a\x2a\x66\x9d\xa3\x03\x72\x7a\x72\xf2\x37\xcd\xb6\x60\x7c\xbe\x50\xde\x00\x84\x4d\x91\xd1\xcd\x80\x4c\x21\x47\x6f\xf5\x50\x21\x24\x64\xb4\xc8\x07\x84\x4e\xa5\xc8\x56\x8a\x59\xb1\x60\xab\xb1\xaf\x06\x04\x6d\xed\xac\x69\x49\xe4\x1d\x57\xc9\xe2\x6a\x39\x27\x23\xd2\xf5\x00\x3a\x8b\x38\x94\x8f\x19\xcf\x53\x56\x6a\x94\x52\xaa\x68\x8c\x63\x32\xbe\x83\x51\x71\x27\xc3\x9f\x42\x28\x3b\xa5\x08\xb5\xf4\xf8\xc7\x57\xb1\x11\x16\x15\xf9\xbc\x7b\x61\x15\x60\x29\xfa\x46\xe2\x67\x99\xb8\xfb\x88\x75\x53\x35\x55\xf0\x5c\xcd\xbe\x91\x8a\x3b\x5e\xb2\xf4\x63\xce\xd4\x9d\x28\x6f\x2b\x2d\x56\x4d\xb2\x31\xd7\xb3\x55\x9e\x20\xd0\x04\x3c\x7c\x2d\x44\x06\x21\xd1\x4b\x36\x50\x51\xd3\x63\xc2\xb2\xbe\xf1\x60\x87\xcf\x48\xef\x79\x2f\xf8\x17\x14\x66\x54\x0c\x01\xc9\x73\x9c\xee\xeb\xd9\x4e\xc9\xd4\xaa\xcc\x8d\x40\x2d\x7d\x59\x11\xe2\x2a\xcc\xd2\x3a\x33\x51\x92\xde\xad\xe1\x1b\x7b\x92\x26\x56\x47\xc7\x31\xbd\x1c\x91\x5b\xf2\x92\x74\x07\xa4\x0b\x3f\x2d\xf2\xf1\xed\x04\x06\x83\xe1\xb4\x8c\x2f\x03\x23\x7a\x6b\x14\x27\x9b\xe8\x45\xaf\x7b\x84\x3c\x3c\xed\xeb\x0c\xeb\x55\xa2\xab\xe6\x31\xb0\xaa\x3a\xba\xf8\x0f\xba\x4e\x6e\xf7\xd8\x4e\x40\xca\x0d\x9c\xfd\x66\x70\x5b\x4d\x6a\x60\x6b\x19\x49\x46\xa5\x64\x12\xac\x44\x55\xa1\x6b\x03\xdd\x8a\xcb\xd8\xd6\xd7\x36\x6e\x9b\x60\xa7\x90\xb1\xd7\x55\x27\xea\xd9\x96\x64\x81\x28\x18\x2b\x21\xd9\x00\xbb\xcf\x5b\xb3\xc0\xd5\x8a\x83\x73\xae\x52\x6f\x68\x5a\x72\x68\x98\x72\x97\x08\xc2\xa7\x1a\xd4\xa3\x0b\x21\x15\xb6\x52\x18\xb3\x7a\xc6\xc1\x6f\x30\x18\x4c\x2a\x0a\x8c\x21\x91\xb1\x08\xa6\x7a\x96\xba\x7f\xe1\x20\x85\xb8\xe8\x7d\x46\x2c\x60\xe1\x3c\x1d\x10\x4b\x72\x0c\xfb\x81\x29\xcb\xfc\x01\xbe\x9c\x03\x18\xb9\xc8\x59\x77\xbb\xb5\x22\xe2\x98\xcc\x78\x29\x15\xa8\xd7\xcb\x26\x34\x83\x2e\xbc\x60\x24\x87\xce\x27\xeb\xd0\xc0\xb0\x31\x8b\x7a\x8b\xe6\x42\x9c\xd4\xf6\xbe\x5b\xcb\x9f\xcd\x7a\xbd\x70\x31\xc4\x1a\x14\xb7\x48\x08\x9a\x50\xac\x65\x88\x31\x50\x0b\xab\x2c\xa9\x38\x7e\x16\xf7\x9a\xa9\x0b\x84\x15\x8a\x53\x71\xff\xb1\x66\xb9\x4a\x2f\xaa\xa8\xd9\x5d\xbd\x27\xc2\x01\x10\x04\xc7\xa4\x80\xa2\x8f\xf1\xf5\x08\x18\x87\x45\x7a\xf2\x6a\xc3\x6b\xb9\x0d\xbd\x5a\xb4\xab\x75\x9e\x74\x2c\x4f\xb2\xe1\x69\x1f\xb9\x71\x2d\x78\x32\x0e\xde\x23\x6d\x30\x31\x8c\xce\x03\x28\xc1\xe2\xaf\xa5\x39\xb8\xb5\x70\x0d\x9c\x03\xfe\xa5\x23\xb7\x06\xec\x5b\x9f\xe1\x73\xab\xb3\x2c\x0f\xad\xad\x2a\xb3\xdb\x2a\x79\xe0\xaf\x55\x9d\xac\x4c\x6d\xe2\xd8\x8a\x9c\x38\x20\x30\xea\x8c\x58\x0c\x3b\x9c\x3f\x6c\x9f\xb7\x9c\x6e\x78\xd9\xad\x56\x85\xd2\xa5\x58\x95\x09\xf3\x3d\xa4\x68\x39\x67\xaa\x5e\x53\x55\x11\x02\x48\x20\x9e\x42\x18\xe0\x26\xf6\xdf\xa6\xdd\xbd\x32\x77\xbf\x98\xc6\x18\x1c\x9d\x9f\x9f\x07\x9e\xab\x3a\x58\xe7\xd1\x57\xad\x25\x8c\x03\xc8\x60\x56\xce\x68\xc2\x9c\x77\x6a\xf7\x20\x93\x75\x8f\x16\x50\xbb\x47\x0b\xd4\xfe\xa9\x1c\xf5\xd2\x51\x3b\x9d\xba\x46\x00\x85\x66\x1d\xdb\x69\xd0\xf9\xe1\xc3\xd5\xaf\x58\x10\x3c\x32\xac\x37\x63\xbc\x98\x54\x0c\x2e\x2d\xfc\x52\xd3\xa0\xf0\x44\xd6\x2a\xf7\x20\x6e\xa4\xb9\x88\xb0\x4c\x0f\x45\x44\xd5\x15\x7d\x00\xdb\x31\x61\xa5\xb6\x2c\xf1\x18\x20\x28\x10\x1b\x0c\x09\x9c\x7e\xc0\x42\x07\x61\x15\x11\x56\xb6\x8d\x08\xeb\x7f\x1b\x0f\x6e\xfe\xaf\xc7\x83\xee\xb1\xc1\x7b\xa8\xfd\x81\xf3\x6e\xbd\x0a\xf2\xc3\x0f\xbb\x5e\xd3\xc4\x13\x2f\x04\x74\xeb\x40\x5f\xee\xf3\xb1\xa1\x76\xa4\xa6\xa5\xeb\x80\xc0\x5c\x37\x3d\xa7\x8f\x7a\x9e\xf7\x9c\x18\x6f\xa6\xef\x38\x6d\x83\x72\xbe\xb7\xe4\x2e\x3e\xb6\xcf\x1a\xbf\x5b\xbf\x4b\x63\x18\xe7\x18\xf8\x27\x17\xcd\xe2\x9f\xcb\xdd\xc2\xff\x96\xa9\xb7\xd2\x2f\xfa\xb9\x6c\x17\x7c\xc3\x66\x61\x04\x17\xcb\x5b\x5e\x10\xd8\xf4\x80\x12\x28\x91\x0b\x22\xf2\x6c\x03\xff\xa0\xe4\x2a\xb1\xa0\xbd\xd3\x1c\x3b\xac\x9e\xc2\x5e\x94\x09\x51\xe0\x6e\xf6\x99\x83\xe6\xdd\xf4\x86\x25\x2a\xba\x65\x1b\xd9\xdb\xb5\x67\x6c\xb4\xb6\xb2\xb5\x1f\x65\x2c\x9f\x83\xca\x21\x39\xab\xbd\x82\x7b\x0f\x9e\xaf\xd8\x85\x05\xc3\xfc\xea\x6a\xab\xe3\xbd\xb1\xa2\x8b\xda\x84\x0a\x90\xe7\x23\x12\x94\xb0\xb7\x08\x3c\x91\xbb\x11\x8b\xc0\xb8\x8c\x32\x9c\x8d\x1e\xb4\xdb\xa2\xbc\xea\xea\xd9\x81\x72\x5a\x96\xda\x4a\xf5\x54\x18\x9e\x3d\xb9\x66\xb9\x92\xa5\xdd\xea\x17\xac\xa7\x95\x2b\x2b\x46\x6f\x97\xab\x12\x61\x79\x11\xc1\x1d\xc6\x6b\x78\xac\x0a\x20\x64\x01\x52\x53\x63\x02\xbf\x80\x6a\x31\xae\xaf\xd6\x99\x59\x75\x92\x1d\x43\x1a\x99\xeb\x21\x80\x2b\x35\x3c\x7e\x6e\x6a\x40\x92\x05\xcf\x52\x8b\x86\xa1\x69\xc5\x90\xc7\xd1\xd1\xd4\x55\x3e\xef\x23\x1e\x3b\x71\x0e\x94\x9a\xd9\x24\x78\x2d\xc2\x29\x94\x7e\x2e\xdb\x8d\xe4\xd8\x11\x62\x46\x23\xf0\x2e\x9b\x5d\x3a\x7b\x79\x7d\x38\x10\x1f\x2d\xee\x36\xd8\x6c\x65\x6f\x56\xf5\x2f\x2d\xea\x90\xf0\xb0\x50\x9a\x95\x8c\xc2\xc3\x2a\xac\x11\x76\x75\xf8\x2c\x43\x28\x49\x85\x52\x2c\x25\xfa\x69\x5d\xf2\x1c\xf2\x5e\x2d\xb8\x24\xf0\x1f\xa6\xbc\x34\x4e\xb0\x25\x41\x2d\xa8\x82\x29\x4f\x2a\x3c\x12\x19\x69\x95\xfb\x69\xae\x2b\x25\x35\xb5\xc5\x8b\x32\x5b\x43\x6d\xd7\xf4\x5c\xb8\x07\x1f\x4d\xed\x1a\x0b\xde\xd5\x6d\xa5\xd9\x77\x0f\xb7\x17\xb3\xb2\x66\x7f\xf9\xb1\xd5\x5f\x4e\x4e\x4e\x02\x2f\xc5\xb7\x5e\x4a\x3d\xd0\xda\xbf\xa0\xb3\x7f\x83\x7e\xf5\xf4\x76\x65\x82\xf9\xe1\xbe\xf4\x58\x5b\xda\xd7\x8d\x5c\x95\xda\x69\x84\x95\x91\xc6\x35\xba\x48\x35\xa1\xab\xa4\x1a\x17\x35\xe7\x1b\x86\x4c\x0e\x3f\x4c\x38\xd9\x2e\x1c\xac\xb4\x3a\x24\x2c\x4d\x1d\x0c\x1e\x8d\x0d\x07\x2a\x17\xed\x70\x38\xb8\xdd\x78\x68\xf1\xb6\x3e\xd8\xc5\xdb\xe8\xf6\x23\xc2\x15\x51\xec\x4b\x6b\xa6\x16\x5e\x09\xdd\x07\x96\xad\x2f\x0d\x30\xf6\xc2\xe6\xc3\xba\x85\xc7\x7e\xc9\xea\xc7\xf5\x3d\xe4\xfb\x05\x1f\xf6\x57\xab\xab\x7d\x47\x7f\x7c\xc9\xee\xcf\x45\xa4\xb1\xeb\x45\x2f\x15\xc9\x6a\x09\x05\xb2\x1f\xe9\x92\xd6\xb3\x67\x06\x3d\x0b\x73\xb2\x81\xb5\xb9\x43\x3c\x7b\xc2\xa1\x89\x07\x64\x87\x1a\x8f\xdf\xf0\x78\x28\xd2\x6c\x58\x00\x2f\x9a\x87\x1a\xb8\x3d\xa1\x3c\x67\x60\x96\x55\x1d\xc1\x7a\xde\x64\x0c\x2f\x7f\xde\x5c\xa5\xbd\x6e\xb2\xe9\xf6\x2b\xf2\x82\xe6\x80\x16\xb9\xd7\xc7\x77\xc7\x04\x54\x9e\x10\x2b\x6a\xc9\xf3\x3f\x84\x58\xc2\x50\x74\x66\x87\xe8\xbd\x19\x3a\xad\x06\xfe\x84\x3b\xc8\x8d\x37\x39\x9d\x66\x0c\x30\x57\xe5\x8a\x55\x53\x2b\xc9\xca\x3f\x0e\x4f\x83\xe6\xfc\x01\xce\xf7\x87\xa7\xe1\xf1\xfe\x77\x96\x31\x0d\xcc\x9e\x79\x02\x7f\x95\xeb\xc6\x04\x2a\xbf\xee\x0e\xee\x2c\x96\x60\x96\xe0\xd0\xbc\xa4\xc5\xc2\x08\x44\x8e\xcf\xf5\x65\x47\x6a\xe9\xe8\xd9\x2e\x9e\x6a\xd8\xc3\x24\x33\xd7\x38\x34\xd2\x43\x9d\x6e\xfb\xe4\x14\x8f\xba\xf0\xec\xb4\xc1\xd9\xe9\xea\x1e\x8a\x73\x18\xa4\x3d\x7d\xd7\x6f\x91\xc8\x05\x04\x01\x92\x94\x60\x01\xcd\xe7\x19\x6b\x11\x78\xaa\xf8\x92\xce\x99\x13\x07\x8d\xf7\xb0\x30\xa4\x3f\x24\x71\x06\x11\x13\x4a\xfe\x27\x52\x9e\x9d\x79\x53\xdb\xfa\x7a\x5b\x43\xfb\x00\x58\x63\xb0\xe1\xf9\x28\xc0\x0d\x6a\x30\x79\x1c\x35\x7d\x90\x0c\x4a\x7f\x7c\xd5\x34\xc8\x1c\x28\xeb\x89\x07\xad\x79\xc8\x6f\x2f\xd0\x71\xe4\x92\xec\xf8\x2f\x91\xb2\x6d\x87\x77\x1a\x8e\x60\x9d\x9e\x14\xf7\x2d\x88\x2c\x45\xc6\x66\xea\x11\x92\x29\xf4\x72\xb1\x7c\x84\xa8\xac\x16\xb8\x8f\x06\x4f\x2c\xc3\x35\xcd\xf8\x3c\x47\x0a\x34\x6a\x0f\xc1\xc2\x11\x24\x0c\x37\x3d\x87\xa3\xa4\x0e\x48\x4a\xe9\x13\x03\xe4\xa9\xb0\x1b\x31\x7e\x04\xfc\xcf\x6c\x07\x27\x5f\x8a\xf9\xeb\xc7\x31\x3f\x4c\xe2\x61\x7e\x98\xa8\xc6\x7c\x97\xe6\xfb\x61\xce\x58\x3b\xdd\xbe\x16\xf3\x9d\x50\xc7\x46\xf4\xf4\x64\x33\xc5\xc2\xb5\xb2\x76\xc9\x80\xdd\x35\xab\xcd\x77\xb4\xba\xd1\xed\xa5\xd5\xca\x1c\xad\xbe\x6b\xd3\x99\x8e\x1a\xd2\xb2\x14\x77\x1e\x34\xd0\x33\x0f\x2d\xda\x05\xd7\xa4\xae\x3b\x19\xdd\x88\x95\x3b\xf2\xd7\x2c\xf8\xd8\xab\x35\xcf\x4b\x8b\x80\x1e\x9f\x71\x65\x1a\xc2\xb3\xa6\x44\xf7\x5c\xf2\x22\xc2\x97\x79\xb6\xd7\xae\x4a\x78\xb0\xe9\xc6\x65\x91\xc4\xf6\x99\xd8\xae\xa0\xda\x4d\x54\xad\x17\x5a\xc7\x92\x82\xe8\xee\x8d\x14\x79\xb7\xd9\x77\x19\xac\xae\xdc\xd7\xb0\xb7\x9e\x28\xdc\x6a\x59\x76\xfb\x12\x62\x95\xc0\xb3\x9f\xf4\x38\x91\xb0\xef\xeb\x24\xee\x1c\x1f\x37\x75\x38\x0d\x9b\x36\x63\x28\xd7\xcf\x98\x76\xcb\xdc\x78\x0d\xb1\x4b\x37\xb6\x62\x26\xfd\xd6\xa6\x41\x19\xbb\xfe\xf9\xe6\xba\xeb\x80\x72\x3f\xde\xbb\xd2\x61\x6c\xbe\x13\x80\x2b\x7c\x99\xa8\x5f\x62\xe6\x74\x4d\xf4\xab\x13\x28\xfc\x74\x3d\xc5\x93\x1f\xfd\x13\xf2\x7c\xcd\x4a\xd8\xf4\x55\xb7\x33\x7e\xcf\x52\xcc\xf7\x40\xbf\xdf\x1b\xa6\xdc\xf1\xb9\x3d\x8b\x99\x6a\xcc\x55\xdc\xa8\xd7\xcd\x83\xf6\x15\x64\x7c\x5e\xbd\x56\x35\x37\x41\x8b\x43\x89\x39\xa4\x15\x81\x78\xcb\x68\x21\x61\x3f\xad\x91\xab\x86\x51\xa7\x19\xb7\xc3\x3a\x46\x47\xc1\x91\xe1\x0e\x08\x2d\x39\x0d\xd9\x3d\xec\x52\x52\x96\x8e\x82\x19\xcd\x90\x56\x8f\xa2\xb9\xa5\xc8\x9c\x2a\x6b\x55\x67\x28\x81\xdc\x9a\x21\xcb\x10\xcf\xa3\x82\xcb\x6b\x63\x08\xd0\xf2\x39\x45\x0f\x03\xa0\x40\xb7\x97\x09\xdf\x00\x86\x5a\xe4\x77\x22\x1a\xc6\x06\x2d\x7b\x4b\x5b\xa8\x4d\x4b\x58\x70\x50\xbd\x0d\x3f\x0a\xec\xd7\x16\xc3\x98\x56\xae\x89\xe1\xd6\xf3\x12\x4f\x1d\x0a\xb5\x37\x0d\xb2\xd6\xf1\x0e\x69\xab\x73\x95\x79\x4a\x2d\x15\xfc\xd4\x38\x66\xdc\x52\x50\xc8\x89\x35\xb0\x82\xa1\xce\xa6\xdf\xc4\x52\x1b\x34\x8c\x33\xee\x96\xb5\xca\xda\x06\xba\xab\x61\x0c\xc2\xcd\x0b\x66\x6b\x72\xb2\x39\xf4\x0d\x07\xbe\xa0\xc5\xe2\x10\xcd\x85\x00\xb7\xd1\x82\xcb\xd6\xdb\x7f\xf3\xc6\x1f\x3f\x5e\x38\x8d\xce\xed\xfb\xff\x27\x7f\x1f\xf1\xd4\x2f\x51\x6e\xda\x1f\xa2\xb4\xa4\x83\x23\x4d\x06\x42\x4e\xea\xaf\x7a\xfe\x1f\x00\x00\xff\xff\x9b\xad\xce\xca\xe7\x23\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 9191, mode: os.FileMode(436), modTime: time.Unix(1449227255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

