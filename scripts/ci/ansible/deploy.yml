---
- name: Create resources
  hosts: localhost
  tags:
    - master
    - slave
  tasks:
  - include: openstack.yml
    when: os_username is defined

- name: Put SELinux in permissive mode
  hosts: jenkins_master, slaves
  tags:
    - master
    - slave
  become: yes
  tasks:
  - selinux:
      policy: targeted
      state: permissive

- name: Install Python 2.x
  hosts: jenkins_master, slaves
  tags:
    - master
    - slave
  become: yes
  tasks:
  - package:
      name: python
      state: present
  - set_fact: ansible_python_interpreter="/usr/bin/python"

- name: Deploy Jenkins master
  hosts: jenkins_master
  tags:
    - master
  become: yes
  roles:
    - role: geerlingguy.java
      java_packages:
        - java-1.8.0-openjdk
    - role: geerlingguy.jenkins
      when: deploy_master is defined
      jenkins_admin_password: "{{ jenkins_admin_password | default('admin', true) }}"
      jenkins_plugins:
        - github
        - git
        - monitoring
        - embeddable-build-status
        - postbuild-task
        - openstack-cloud
        - ghprb
        - cobertura
        - greenballs
        - chucknorris
        - ansicolor
        - credentials-binding
        - build-timeout
        - timestamper
        - jenkins-multijob-plugin
        - envinject
        - nodelabelparameter

- name: Install requirements
  hosts: slaves
  tags:
    - slave
  become: yes
  tasks:
  - package:
      name: "{{ item }}"
      state: present
    with_items:
       - unzip
       - wget
       - https://www.rdoproject.org/repos/rdo-release.rpm
  - copy:
      content: |
        jenkins ALL=(root) NOPASSWD:ALL
        Defaults:jenkins secure_path=/sbin:/usr/sbin:/usr/bin:/bin:/usr/local/sbin:/usr/local/bin
        Defaults:jenkins !requiretty
      mode: 0440
      dest: /etc/sudoers.d/jenkins
      owner: root
      group: root
  - copy:
      content: |
        Cmnd_Alias VAGRANT_EXPORTS_CHOWN = /bin/chown 0\:0 /tmp/*
        Cmnd_Alias VAGRANT_EXPORTS_MV = /bin/mv -f /tmp/* /etc/exports
        Cmnd_Alias VAGRANT_NFSD_CHECK = /usr/bin/systemctl status --no-pager nfs-server.service
        Cmnd_Alias VAGRANT_NFSD_START = /usr/bin/systemctl start nfs-server.service
        Cmnd_Alias VAGRANT_NFSD_APPLY = /usr/sbin/exportfs -ar
        %vagrant ALL=(root) NOPASSWD: VAGRANT_EXPORTS_CHOWN, VAGRANT_EXPORTS_MV, VAGRANT_NFSD_CHECK, VAGRANT_NFSD_START, VAGRANT_NFSD_APPLY
      mode: 0440
      dest: /etc/sudoers.d/vagrant-syncedfolders
      owner: root
      group: root
  - lineinfile:
      dest: /etc/hosts
      line: "{{ hostvars['jenkins_master']['private_ip'] }} {{ jenkins_public_hostname }}"
      state: present
  roles:
    - role: skydive_dev

- name: Install orientdb and elasticsearch
  hosts: slaves
  tags:
    - master
    - slave
  become: yes
  roles:
   - role: orientdb
   - role: elasticsearch

- name: Register Jenkins slaves
  hosts: jenkins_master
  tags:
    - master
    - slave
  tasks:
  - name: Workaround, Pause 2 minutes waiting for jenkins_master to settle
    pause:
      minutes: 2
    when: deploy_master is defined
  - uri:
      url: http://localhost:8080/scriptText
      method: POST
      user: admin
      password: "{{ jenkins_admin_password | default('admin' )}}"
      body: |
        script=import jenkins.model.*
        import hudson.model.*
        import hudson.slaves.*

        Jenkins.instance.setSlaveAgentPort(39553)

        Jenkins.instance.addNode(
          new DumbSlave(
            "{{ item }}",
            "",
            "/var/lib/jenkins",
            "1",
            Node.Mode.NORMAL,
            "slaves",
            new JNLPLauncher(),
            new RetentionStrategy.Always(),
            new LinkedList()))
      force_basic_auth: yes
    with_items: "{{ groups.slaves }}"

  - uri:
      url: http://localhost:8080/scriptText
      method: GET
      user: admin
      password: "{{ jenkins_admin_password | default('admin' )}}"
      body: |
        script=
        for (aSlave in hudson.model.Hudson.instance.slaves) {
            println aSlave.getComputer().getJnlpMac()
        }
      force_basic_auth: yes

- name: Get JNLP slave secrets
  hosts: jenkins_master
  tags:
    - master
    - slave
    - jenkins_slave_setup
  tasks:
  - uri:
      url: http://localhost:8080/scriptText
      method: POST
      user: admin
      password: "{{ jenkins_admin_password | default('admin' )}}"
      body: |
        script=String agent_name = "{{ item }}"
        String result
        hudson.model.Hudson.instance.slaves.find { agent ->
            agent.name == agent_name
        }.with { agent ->
            result = agent.getComputer().getJnlpMac()
        }
        print result
      force_basic_auth: yes
      return_content: yes
    with_items: "{{ groups.slaves }}"
    register: slave_secrets
  - name: make a slave_secrets map
    set_fact:
      secret_hostmap: "{{ secret_hostmap|default({}) | combine( {item.item: item.content} ) }}"
    with_items: "{{ slave_secrets.results }}"

- name: Configure Jenkins
  hosts: slaves
  tags:
    - slave
  become: yes
  tasks:
  - group:
      name: jenkins
      state: present
  - group:
      name: docker
      state: present
  - group:
      name: lxd
      state: present
  - group:
      name: vagrant
      state: present
  - user:
      name: jenkins
      group: jenkins
      groups: jenkins,libvirt,docker,lxd,mock,vagrant,vpp
      home: /var/lib/jenkins
  - service:
      name: "{{ item }}"
      state: restarted
      enabled: yes
    with_items:
      - docker

- name: Start Jenkins slaves
  hosts: slaves
  tags:
    - master
    - slave
    - jenkins_slave_setup
  become: yes
  tasks:
  - get_url:
      url: "http://{{ hostvars['jenkins_master']['private_ip'] }}:8080/jnlpJars/slave.jar"
      dest: /var/lib/jenkins/slave.jar
  - package:
      name: java
      state: present
  - copy:
      content: |
        [Unit]
        Description=Jenkins Slave
        Wants=network.target
        After=network.target

        [Install]
        WantedBy=multi-user.target

        [Service]
        ExecStart=/usr/bin/java -jar /var/lib/jenkins/slave.jar -jnlpUrl http://{{ hostvars['jenkins_master']['private_ip'] }}:8080/computer/{{ inventory_hostname_short }}/slave-agent.jnlp -secret {{ hostvars['jenkins_master']['secret_hostmap'][ inventory_hostname_short ] }}
        User=jenkins
        Restart=always
      mode: 0644
      dest: /etc/systemd/system/jenkins-slave.service
      owner: root
      group: root
  - shell: systemctl daemon-reload
  - shell: vagrant plugin install vagrant-openstack-provider
    become: yes
    become_user: jenkins
  - file:
      path: /var/lib/jenkins/.config/lxc
      owner: jenkins
      group: jenkins
      state: directory
  - copy:
      content: |
        default-remote: local
        remotes:
          images:
            addr: https://images.linuxcontainers.org
            protocol: simplestreams
            public: true
        local:
          addr: unix://
          public: false
        aliases: {}
      mode: 0644
      dest: /var/lib/jenkins/.config/lxc/config.yml
      owner: jenkins
      group: jenkins
  - file:
      path: /var/lib/jenkins/.docker
      owner: jenkins
      group: jenkins
      state: directory
  - copy:
      content: |
        {"experimental": "enabled"}
      mode: 0644
      dest: /var/lib/jenkins/.docker/config.json
      owner: jenkins
      group: jenkins
  - service:
      name: jenkins-slave
      state: started
      enabled: yes

- name: Stop firewalld on Jenkins slaves
  hosts: slaves
  tags:
    - master
    - slave
  become: yes
  ignore_errors: yes
  tasks:
  - service:
      name: firewalld
      state: stopped
      enabled: no

- name: Install squid
  hosts: slaves
  tags:
    - slave
  become: yes
  tasks:
  - package:
      name: squid
  - lineinfile:
      path: /etc/squid/squid.conf
      regexp: 'cache_dir ufs /var/spool/squid'
      line: 'cache_dir ufs /var/spool/squid 8192 16 256'
  - lineinfile:
      path: /etc/squid/squid.conf
      insertafter: 'cache_dir ufs /var/spool/squid 8192 16 256'
      line: 'maximum_object_size 2048 MB'
  - service:
      name: squid
      state: restarted
      enabled: yes

- name: Reboot Jenkins slaves to match running kernel and devel headers
  hosts: slaves
  tags:
    - master
    - slave
  become: yes
  ignore_errors: yes
  tasks:
    - shell: shutdown -r

- name: Jenkins master post configuration
  hosts: jenkins_master
  tags:
    - master
  become: yes
  roles:
  - role: jenkins_master
    when: deploy_master is defined
    jenkins_url: "http://{{ jenkins_public_ip }}:8080"
    jenkins_admin_password: jenkins_admin_password | default('admin')
    cloud: cloud | default(None)
    os_username: os_username | default(None, True)
    os_password: os_password | default(None, True)
    os_tenant_name: os_tenant_name | default(None, True)
    os_image: "{{ image }}"
    os_flavor: "{{ hostvars['localhost']['os_flavor'] }}"
    os_network: "{{ hostvars['localhost']['os_network'] }}"
    os_floating_ip_pool: os_floating_ip_pool | default('public')
    os_keypair: os_keypair | default(None, True)
    github_secret: github_secret | default(None, True)
