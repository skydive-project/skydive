---
- file:
    path: "/var/lib/jenkins/.ssh/{{ item }}"
    state: absent
  with_items:
    - id_rsa
    - id_rsa.pub

- shell: sudo -u jenkins ssh-keygen -t rsa -N "" -f /var/lib/jenkins/.ssh/id_rsa

- shell: cat /var/lib/jenkins/.ssh/id_rsa.pub
  register: jenkins_public_key

- set_fact: jenkins_public_key="{{ jenkins_public_key.stdout }}"

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    jlc = JenkinsLocationConfiguration.get();
    jlc.setUrl("{{ jenkins_url }}");
    jlc.save();
    ' http://localhost:8080/scriptText

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import hudson.markup.RawHtmlMarkupFormatter
    Jenkins.instance.setMarkupFormatter(new RawHtmlMarkupFormatter(false))
    Jenkins.instance.save()
    ' http://localhost:8080/scriptText

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import hudson.util.Secret;
    import com.cloudbees.plugins.credentials.*;
    import com.cloudbees.plugins.credentials.domains.Domain;
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl;
    import net.sf.json.*;
    import org.kohsuke.stapler.*;

    def descriptor = jenkins.model.Jenkins.getInstance().getDescriptorByType(org.jenkinsci.plugins.ghprb.GhprbTrigger.DescriptorImpl.class);
    stapler = Stapler.getCurrentRequest();
    jsonObject = new JSONObject();
    jsonObject.put("serverAPIUrl", "https://api.github.com");
    jsonObject.put("username", "");
    jsonObject.put("password", "");
    jsonObject.put("accessToken", "accessToken");
    jsonObject.put("adminlist", "");
    jsonObject.put("allowMembersOfWhitelistedOrgsAsAdmin", "false");
    jsonObject.put("publishedURL", "");
    jsonObject.put("requestForTestingPhrase", "test this");
    jsonObject.put("whitelistPhrase", "");
    jsonObject.put("okToTestPhrase", "ok to test");
    jsonObject.put("retestPhrase", "retest this please");
    jsonObject.put("skipBuildPhrase", "[skip ci]");
    jsonObject.put("cron", "*/1 * * * *");
    jsonObject.put("useComments", "false");
    jsonObject.put("logExcerptLines", "0");
    jsonObject.put("unstableAs", "");
    jsonObject.put("testMode", "true");
    jsonObject.put("autoCloseFailedPullRequests", "false");
    jsonObject.put("msgSuccess", "Success");
    jsonObject.put("msgFailure", "Failure");
    jsonObject.put("blackListCommitAuthor", "");
    jsonObject.put("useDetailedComments", "false");
    jsonObject.put("manageWebhooks", "false");
    jsonObject.put("unstableAs", "ERROR");
    jsonObject.put("autoCloseFailedPullRequests", "false");
    jsonObject.put("displayBuildErrorsOnDownstreamBuilds", "false");
    jsonObject.put("blackListLabels", "");
    jsonObject.put("whiteListLabels", "");
    auth = new JSONObject();
    auth.put("serverAPIUrl", "https://api.github.com");
    auth.put("credentialsId", "github");
    jsonObject.put("githubAuth", auth);
    descriptor.configure(stapler, jsonObject);
    descriptor.save();
    ' http://localhost:8080/scriptText

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import hudson.util.Secret;
    import com.cloudbees.plugins.credentials.*;
    import com.cloudbees.plugins.credentials.domains.Domain;
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl;
    domain = Domain.global();
    store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore();
    secretText = new StringCredentialsImpl( \
      CredentialsScope.GLOBAL, \
      "github", \
      "Github API key", \
      Secret.fromString("{{ github_secret }}")); \
    store.addCredentials(domain, secretText);
    ' http://localhost:8080/scriptText

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import hudson.util.Secret;
    import com.cloudbees.plugins.credentials.*;
    import com.cloudbees.plugins.credentials.domains.Domain;
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey;
    domain = Domain.global();
    store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore();
    privateKey = new BasicSSHUserPrivateKey( \
      CredentialsScope.GLOBAL, \
      "jenkins-slave-key", \
      "jenkins", \
      new BasicSSHUserPrivateKey.UsersPrivateKeySource(), \
      "", \
      "" \
    );
    store.addCredentials(domain, privateKey);
    ' http://localhost:8080/scriptText

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import jenkins.plugins.openstack.compute.*;

    slaveOptions = new SlaveOptions( \
        "{{ os_image }}", \
        "{{ os_flavor }}", \
        "{{ os_network }}", \
        "devstack-userdata", \
        null, \
        "{{ os_floating_ip_pool }}", \
        "", \
        "", \
        null, \
        "{{ os_keypair }}", \
        1, \
        "", \
        "/var/lib/jenkins", \
        "jenkins-slave-key", \
        JCloudsCloud.SlaveType.SSH, \
        null \
    );
    slaveTemplate = new JCloudsSlaveTemplate(
      "devstack", "devstack", slaveOptions
    );
    templates = new LinkedList();
    templates.push(slaveTemplate);
    jcloud = new JCloudsCloud( \
        "{{ cloud }}", \
        "{{ os_tenant_name }}:{{ os_username }}", \
        "{{ os_password }}", \
        "{{ os_auth_url }}", \
        null, \
        slaveOptions, \
        templates \
    );
    Jenkins.instance.clouds.add(jcloud);
    ' http://localhost:8080/scriptText
  when: os_username | bool

- shell: |
    curl --user "admin:{{ jenkins_admin_password | default('admin') }}" \
      --data-urlencode 'script= \
    import jenkins.plugins.openstack.compute.*;

    content = "#cloud-config\n";
    content += "packages:\n";
    content += "- java\n";
    content += "- git\n";
    content += "users:\n";
    content += "- name: fedora\n";
    content += "  ssh-authorized-keys:\n";
    content += "  - {{ jenkins_public_key }}\n";
    content += "- name: jenkins\n";
    content += "  ssh-authorized-keys:\n";
    content += "  - {{ jenkins_public_key }}\n";
    content += "  homedir: /var/lib/jenkins\n";
    content += "  sudo:\n";
    content += "  - ALL=(ALL) NOPASSWD:ALL\n";

    config = new UserDataConfig("devstack-userdata", "Devstack Userdata", "Devstack Userdata", content);
    exts = Jenkins.instance.getExtensionList("org.jenkinsci.plugins.configfiles.GlobalConfigFiles");
    globalConfigFiles = exts[0];
    store = globalConfigFiles.save(config);
    ' http://localhost:8080/scriptText
  when: os_username | bool

- service:
   name: jenkins
   state: restarted
