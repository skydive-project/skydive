// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package analyzer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/skydive-project/skydive/common"
	hub "github.com/skydive-project/skydive/graffiti/hub"
	websocket "github.com/skydive-project/skydive/graffiti/websocket"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Agents":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Agents = make(map[string]websocket.ConnStatus)
				} else {
					out.Agents = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 websocket.ConnStatus
					easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v1)
					(out.Agents)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Peers":
			easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiHub(in, &out.Peers)
		case "Publishers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Publishers = make(map[string]websocket.ConnStatus)
				} else {
					out.Publishers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 websocket.ConnStatus
					easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v2)
					(out.Publishers)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Subscribers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subscribers = make(map[string]websocket.ConnStatus)
				} else {
					out.Subscribers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 websocket.ConnStatus
					easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v3)
					(out.Subscribers)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Alerts":
			(out.Alerts).UnmarshalEasyJSON(in)
		case "Captures":
			(out.Captures).UnmarshalEasyJSON(in)
		case "Probes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Probes = make(map[string]interface{})
				} else {
					out.Probes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Probes)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Agents\":"
		out.RawString(prefix[1:])
		if in.Agents == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Agents {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Peers\":"
		out.RawString(prefix)
		easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiHub(out, in.Peers)
	}
	{
		const prefix string = ",\"Publishers\":"
		out.RawString(prefix)
		if in.Publishers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Publishers {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v6Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Subscribers\":"
		out.RawString(prefix)
		if in.Subscribers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Subscribers {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v7Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Alerts\":"
		out.RawString(prefix)
		(in.Alerts).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Captures\":"
		out.RawString(prefix)
		(in.Captures).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Probes\":"
		out.RawString(prefix)
		if in.Probes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Probes {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer(l, v)
}
func easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiHub(in *jlexer.Lexer, out *hub.PeersStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Incomers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Incomers = make(map[string]websocket.ConnStatus)
				} else {
					out.Incomers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 websocket.ConnStatus
					easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v9)
					(out.Incomers)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Outgoers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Outgoers = make(map[string]websocket.ConnStatus)
				} else {
					out.Outgoers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 websocket.ConnStatus
					easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in, &v10)
					(out.Outgoers)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiHub(out *jwriter.Writer, in hub.PeersStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Incomers\":"
		out.RawString(prefix[1:])
		if in.Incomers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Incomers {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v11Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Outgoers\":"
		out.RawString(prefix)
		if in.Outgoers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Outgoers {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out, v12Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(in *jlexer.Lexer, out *websocket.ConnStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ServiceType":
			out.ServiceType = common.ServiceType(in.String())
		case "ClientProtocol":
			out.ClientProtocol = websocket.Protocol(in.String())
		case "Addr":
			out.Addr = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "IsConnected":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(websocket.ConnState)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.State).UnmarshalJSON(data))
				}
			}
		case "ConnectTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConnectTime).UnmarshalJSON(data))
			}
		case "RemoteHost":
			out.RemoteHost = string(in.String())
		case "RemoteServiceType":
			out.RemoteServiceType = common.ServiceType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveGraffitiWebsocket(out *jwriter.Writer, in websocket.ConnStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ServiceType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ServiceType))
	}
	{
		const prefix string = ",\"ClientProtocol\":"
		out.RawString(prefix)
		out.String(string(in.ClientProtocol))
	}
	{
		const prefix string = ",\"Addr\":"
		out.RawString(prefix)
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"IsConnected\":"
		out.RawString(prefix)
		if in.State == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.State).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ConnectTime\":"
		out.RawString(prefix)
		out.Raw((in.ConnectTime).MarshalJSON())
	}
	if in.RemoteHost != "" {
		const prefix string = ",\"RemoteHost\":"
		out.RawString(prefix)
		out.String(string(in.RemoteHost))
	}
	if in.RemoteServiceType != "" {
		const prefix string = ",\"RemoteServiceType\":"
		out.RawString(prefix)
		out.String(string(in.RemoteServiceType))
	}
	out.RawByte('}')
}
func easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer1(in *jlexer.Lexer, out *ElectionStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsMaster":
			out.IsMaster = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer1(out *jwriter.Writer, in ElectionStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsMaster\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsMaster))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElectionStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElectionStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComSkydiveProjectSkydiveAnalyzer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElectionStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElectionStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComSkydiveProjectSkydiveAnalyzer1(l, v)
}
