// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow/layers/generated.proto

package layers

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LayerDHCPv4 wrapper to generate extra layer
type DHCPv4 struct {
	Contents     []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Payload      []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	HardwareLen  uint8  `protobuf:"varint,3,opt,name=hardware_len,json=hardwareLen,proto3,casttype=uint8" json:"hardware_len,omitempty"`
	HardwareOpts uint8  `protobuf:"varint,4,opt,name=hardware_opts,json=hardwareOpts,proto3,casttype=uint8" json:"hardware_opts,omitempty"`
	Xid          uint32 `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Secs         uint16 `protobuf:"varint,6,opt,name=secs,proto3,casttype=uint16" json:"secs,omitempty"`
	Flags        uint16 `protobuf:"varint,7,opt,name=flags,proto3,casttype=uint16" json:"flags,omitempty"`
	ServerName   []byte `protobuf:"bytes,8,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	File         []byte `protobuf:"bytes,9,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *DHCPv4) Reset()         { *m = DHCPv4{} }
func (m *DHCPv4) String() string { return proto.CompactTextString(m) }
func (*DHCPv4) ProtoMessage()    {}
func (*DHCPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_2fe559af61ff5253, []int{0}
}
func (m *DHCPv4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPv4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DHCPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPv4.Merge(dst, src)
}
func (m *DHCPv4) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DHCPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPv4.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPv4 proto.InternalMessageInfo

// LayerDNS wrapper to generate extra layer
type DNS struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Payload  []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ID       uint16 `protobuf:"varint,3,opt,name=id,proto3,casttype=uint16" json:"ID,omitempty"`
	QR       bool   `protobuf:"varint,4,opt,name=qr,proto3" json:"QR,omitempty"`
	AA       bool   `protobuf:"varint,5,opt,name=aa,proto3" json:"AA,omitempty"`
	TC       bool   `protobuf:"varint,6,opt,name=tc,proto3" json:"TC,omitempty"`
	RD       bool   `protobuf:"varint,7,opt,name=rd,proto3" json:"RD,omitempty"`
	RA       bool   `protobuf:"varint,8,opt,name=ra,proto3" json:"RA,omitempty"`
	Z        uint8  `protobuf:"varint,9,opt,name=z,proto3,casttype=uint8" json:"z,omitempty"`
	QDCount  uint16 `protobuf:"varint,10,opt,name=qdcount,proto3,casttype=uint16" json:"QDCount,omitempty"`
	ANCount  uint16 `protobuf:"varint,11,opt,name=ancount,proto3,casttype=uint16" json:"ANCount,omitempty"`
	NSCount  uint16 `protobuf:"varint,12,opt,name=nscount,proto3,casttype=uint16" json:"NSCount,omitempty"`
	ARCount  uint16 `protobuf:"varint,13,opt,name=arcount,proto3,casttype=uint16" json:"ARCount,omitempty"`
}

func (m *DNS) Reset()         { *m = DNS{} }
func (m *DNS) String() string { return proto.CompactTextString(m) }
func (*DNS) ProtoMessage()    {}
func (*DNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_2fe559af61ff5253, []int{1}
}
func (m *DNS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNS.Merge(dst, src)
}
func (m *DNS) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNS) XXX_DiscardUnknown() {
	xxx_messageInfo_DNS.DiscardUnknown(m)
}

var xxx_messageInfo_DNS proto.InternalMessageInfo

// LayerVRRPv2 wrapper to generate extra layer
type VRRPv2 struct {
	Contents     []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Payload      []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Version      uint8  `protobuf:"varint,3,opt,name=version,proto3,casttype=uint8" json:"version,omitempty"`
	VirtualRtrID uint8  `protobuf:"varint,4,opt,name=virtual_rtr_id,json=virtualRtrId,proto3,casttype=uint8" json:"VirtualRtrID,omitempty"`
	Priority     uint8  `protobuf:"varint,5,opt,name=priority,proto3,casttype=uint8" json:"priority,omitempty"`
	CountIPAddr  uint8  `protobuf:"varint,6,opt,name=count_ipaddr,json=countIpaddr,proto3,casttype=uint8" json:"CountIPAddr,omitempty"`
	AdverInt     uint8  `protobuf:"varint,7,opt,name=adver_int,json=adverInt,proto3,casttype=uint8" json:"adver_int,omitempty"`
	Checksum     uint16 `protobuf:"varint,8,opt,name=checksum,proto3,casttype=uint16" json:"checksum,omitempty"`
}

func (m *VRRPv2) Reset()         { *m = VRRPv2{} }
func (m *VRRPv2) String() string { return proto.CompactTextString(m) }
func (*VRRPv2) ProtoMessage()    {}
func (*VRRPv2) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_2fe559af61ff5253, []int{2}
}
func (m *VRRPv2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VRRPv2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VRRPv2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VRRPv2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VRRPv2.Merge(dst, src)
}
func (m *VRRPv2) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VRRPv2) XXX_DiscardUnknown() {
	xxx_messageInfo_VRRPv2.DiscardUnknown(m)
}

var xxx_messageInfo_VRRPv2 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DHCPv4)(nil), "layers.DHCPv4")
	proto.RegisterType((*DNS)(nil), "layers.DNS")
	proto.RegisterType((*VRRPv2)(nil), "layers.VRRPv2")
}
func (m *DHCPv4) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPv4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Contents)))
		i += copy(dAtA[i:], m.Contents)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.HardwareLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.HardwareLen))
	}
	if m.HardwareOpts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.HardwareOpts))
	}
	if m.Xid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Xid))
	}
	if m.Secs != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Secs))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Flags))
	}
	if len(m.ServerName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	return i, nil
}

func (m *DNS) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Contents)))
		i += copy(dAtA[i:], m.Contents)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.ID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ID))
	}
	if m.QR {
		dAtA[i] = 0x20
		i++
		if m.QR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AA {
		dAtA[i] = 0x28
		i++
		if m.AA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TC {
		dAtA[i] = 0x30
		i++
		if m.TC {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RD {
		dAtA[i] = 0x38
		i++
		if m.RD {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RA {
		dAtA[i] = 0x40
		i++
		if m.RA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Z != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Z))
	}
	if m.QDCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.QDCount))
	}
	if m.ANCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ANCount))
	}
	if m.NSCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.NSCount))
	}
	if m.ARCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ARCount))
	}
	return i, nil
}

func (m *VRRPv2) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VRRPv2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Contents)))
		i += copy(dAtA[i:], m.Contents)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Version))
	}
	if m.VirtualRtrID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.VirtualRtrID))
	}
	if m.Priority != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Priority))
	}
	if m.CountIPAddr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.CountIPAddr))
	}
	if m.AdverInt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.AdverInt))
	}
	if m.Checksum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Checksum))
	}
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DHCPv4) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HardwareLen != 0 {
		n += 1 + sovGenerated(uint64(m.HardwareLen))
	}
	if m.HardwareOpts != 0 {
		n += 1 + sovGenerated(uint64(m.HardwareOpts))
	}
	if m.Xid != 0 {
		n += 1 + sovGenerated(uint64(m.Xid))
	}
	if m.Secs != 0 {
		n += 1 + sovGenerated(uint64(m.Secs))
	}
	if m.Flags != 0 {
		n += 1 + sovGenerated(uint64(m.Flags))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *DNS) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGenerated(uint64(m.ID))
	}
	if m.QR {
		n += 2
	}
	if m.AA {
		n += 2
	}
	if m.TC {
		n += 2
	}
	if m.RD {
		n += 2
	}
	if m.RA {
		n += 2
	}
	if m.Z != 0 {
		n += 1 + sovGenerated(uint64(m.Z))
	}
	if m.QDCount != 0 {
		n += 1 + sovGenerated(uint64(m.QDCount))
	}
	if m.ANCount != 0 {
		n += 1 + sovGenerated(uint64(m.ANCount))
	}
	if m.NSCount != 0 {
		n += 1 + sovGenerated(uint64(m.NSCount))
	}
	if m.ARCount != 0 {
		n += 1 + sovGenerated(uint64(m.ARCount))
	}
	return n
}

func (m *VRRPv2) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovGenerated(uint64(m.Version))
	}
	if m.VirtualRtrID != 0 {
		n += 1 + sovGenerated(uint64(m.VirtualRtrID))
	}
	if m.Priority != 0 {
		n += 1 + sovGenerated(uint64(m.Priority))
	}
	if m.CountIPAddr != 0 {
		n += 1 + sovGenerated(uint64(m.CountIPAddr))
	}
	if m.AdverInt != 0 {
		n += 1 + sovGenerated(uint64(m.AdverInt))
	}
	if m.Checksum != 0 {
		n += 1 + sovGenerated(uint64(m.Checksum))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DHCPv4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPv4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPv4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareLen", wireType)
			}
			m.HardwareLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareLen |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareOpts", wireType)
			}
			m.HardwareOpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareOpts |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			m.Xid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secs", wireType)
			}
			m.Secs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Secs |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = append(m.ServerName[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerName == nil {
				m.ServerName = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QR = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AA = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TC = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RD", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RD = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RA = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QDCount", wireType)
			}
			m.QDCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QDCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ANCount", wireType)
			}
			m.ANCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ANCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSCount", wireType)
			}
			m.NSCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARCount", wireType)
			}
			m.ARCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ARCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VRRPv2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VRRPv2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VRRPv2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRtrID", wireType)
			}
			m.VirtualRtrID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VirtualRtrID |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountIPAddr", wireType)
			}
			m.CountIPAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountIPAddr |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdverInt", wireType)
			}
			m.AdverInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdverInt |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("flow/layers/generated.proto", fileDescriptor_generated_2fe559af61ff5253)
}

var fileDescriptor_generated_2fe559af61ff5253 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0x66, 0x81, 0x02, 0x1d, 0xa8, 0xd1, 0x49, 0xac, 0x9b, 0x9a, 0xec, 0x92, 0xaa, 0x4d, 0x63,
	0x6a, 0xb1, 0xd6, 0x18, 0xe3, 0x8d, 0xc2, 0x41, 0x12, 0x83, 0xed, 0xb4, 0x69, 0xa2, 0x17, 0x32,
	0xdd, 0x19, 0xe8, 0x46, 0xd8, 0xa5, 0xb3, 0x03, 0x95, 0xfe, 0x02, 0x8f, 0xfa, 0x0f, 0x7a, 0xf7,
	0x8f, 0x78, 0xec, 0xd1, 0xd3, 0xc6, 0xc0, 0xad, 0xf1, 0x17, 0xf4, 0x64, 0xe6, 0xed, 0xb0, 0x2c,
	0x4a, 0x3c, 0xf4, 0xf6, 0xde, 0x7c, 0xdf, 0xfb, 0xe6, 0xcd, 0x37, 0xf3, 0x06, 0x3d, 0x6c, 0x77,
	0xfd, 0xf3, 0x4a, 0x97, 0x8e, 0xb8, 0x08, 0x2a, 0x1d, 0xee, 0x71, 0x41, 0x25, 0x67, 0xdb, 0x7d,
	0xe1, 0x4b, 0x1f, 0xe7, 0xa2, 0xf5, 0xb5, 0x67, 0x1d, 0x57, 0x9e, 0x0e, 0x4e, 0xb6, 0x1d, 0xbf,
	0x57, 0xe9, 0xf8, 0x1d, 0xbf, 0x02, 0xf0, 0xc9, 0xa0, 0x0d, 0x19, 0x24, 0x10, 0x45, 0x65, 0xeb,
	0xdf, 0xd3, 0x28, 0x57, 0x7f, 0x5b, 0xdb, 0x1f, 0xbe, 0xc4, 0x6b, 0xa8, 0xe0, 0xf8, 0x9e, 0xe4,
	0x9e, 0x0c, 0x4c, 0xa3, 0x6c, 0x6c, 0x96, 0x48, 0x9c, 0x63, 0x13, 0xe5, 0xfb, 0x74, 0xd4, 0xf5,
	0x29, 0x33, 0xd3, 0x00, 0x4d, 0x53, 0xbc, 0x85, 0x4a, 0xa7, 0x54, 0xb0, 0x73, 0x2a, 0x78, 0xab,
	0xcb, 0x3d, 0x33, 0x53, 0x36, 0x36, 0x57, 0xf6, 0x96, 0x6f, 0x42, 0x7b, 0x69, 0xe0, 0x7a, 0xf2,
	0x35, 0x29, 0x4e, 0xe1, 0x77, 0xdc, 0xc3, 0xdb, 0x68, 0x25, 0x66, 0xfb, 0x7d, 0x19, 0x98, 0xd9,
	0xbf, 0xe9, 0xb1, 0xda, 0xfb, 0xbe, 0x0c, 0xf0, 0x5d, 0x94, 0xf9, 0xec, 0x32, 0x73, 0x49, 0xb1,
	0x88, 0x0a, 0xb1, 0x85, 0xb2, 0x01, 0x77, 0x02, 0x33, 0x07, 0x85, 0xe8, 0x26, 0xb4, 0x73, 0xaa,
	0x70, 0xe7, 0x15, 0x81, 0x75, 0x5c, 0x46, 0x4b, 0xed, 0x2e, 0xed, 0x04, 0x66, 0xfe, 0x1f, 0x42,
	0x04, 0x60, 0x1b, 0x15, 0x03, 0x2e, 0x86, 0x5c, 0xb4, 0x3c, 0xda, 0xe3, 0x66, 0x01, 0xce, 0x83,
	0xa2, 0xa5, 0x26, 0xed, 0x71, 0x8c, 0x51, 0xb6, 0xed, 0x76, 0xb9, 0xb9, 0x0c, 0x08, 0xc4, 0x6f,
	0xb2, 0x5f, 0x2e, 0xed, 0xd4, 0xfa, 0xef, 0x2c, 0xca, 0xd4, 0x9b, 0x87, 0xb7, 0xb4, 0xea, 0x39,
	0x4a, 0xbb, 0x4c, 0x1b, 0x54, 0x1e, 0x87, 0x76, 0xba, 0x51, 0xbf, 0x0e, 0xed, 0x52, 0xa3, 0xbe,
	0xe5, 0xf7, 0x5c, 0xc9, 0x7b, 0x7d, 0x39, 0x4a, 0x74, 0x9b, 0x76, 0x19, 0xde, 0x40, 0xe9, 0x33,
	0x01, 0x1e, 0x15, 0xf6, 0x56, 0x55, 0xc5, 0x01, 0x51, 0x15, 0x07, 0x64, 0x56, 0x41, 0xd2, 0x67,
	0x42, 0xf1, 0x28, 0x05, 0x97, 0x34, 0xaf, 0x5a, 0x55, 0xbc, 0x6a, 0x35, 0xc9, 0xa3, 0x54, 0xf1,
	0xa4, 0x03, 0xd6, 0x69, 0xde, 0x51, 0x4d, 0xf1, 0x8e, 0x6a, 0x49, 0x9e, 0x74, 0x14, 0x4f, 0x30,
	0x70, 0x50, 0xf3, 0x08, 0x74, 0x4a, 0xea, 0x49, 0x9e, 0x80, 0xfe, 0x04, 0x05, 0x07, 0xa7, 0x3c,
	0xd8, 0x97, 0xcc, 0xed, 0x2b, 0x28, 0x7e, 0x80, 0x8c, 0x0b, 0xb0, 0x73, 0xee, 0xaa, 0x8d, 0x0b,
	0x5c, 0x47, 0xf9, 0x33, 0xe6, 0xf8, 0x03, 0x4f, 0x9a, 0x08, 0xe0, 0xa7, 0xe3, 0xd0, 0xce, 0x1f,
	0xd4, 0x6b, 0x6a, 0xe9, 0x3a, 0xb4, 0xef, 0xe9, 0x70, 0xa1, 0x43, 0xd3, 0x52, 0xa5, 0x42, 0xbd,
	0x48, 0xa5, 0x38, 0x53, 0xa9, 0x36, 0x63, 0x15, 0x1d, 0x2e, 0x56, 0xd1, 0xa5, 0x4a, 0xc5, 0x0b,
	0x22, 0x95, 0xd2, 0x4c, 0xa5, 0x79, 0x18, 0xab, 0xe8, 0x70, 0xb1, 0x8a, 0x2e, 0x85, 0x5e, 0x44,
	0xa4, 0xb2, 0x92, 0xe8, 0x85, 0xcc, 0x7a, 0x21, 0xff, 0xeb, 0x25, 0x2a, 0xd5, 0xcf, 0xed, 0x5b,
	0x06, 0xe5, 0x8e, 0x09, 0xd9, 0x1f, 0xbe, 0xb8, 0xe5, 0x8b, 0x7b, 0x84, 0xf2, 0x43, 0x2e, 0x02,
	0xd7, 0x5f, 0x30, 0x97, 0x53, 0x04, 0x7f, 0x40, 0x77, 0x86, 0xae, 0x90, 0x03, 0xda, 0x6d, 0x09,
	0x29, 0x5a, 0x2e, 0xd3, 0x43, 0xb9, 0x3b, 0x0e, 0xed, 0xd2, 0x71, 0x84, 0x10, 0x29, 0xe0, 0xb1,
	0xae, 0x26, 0xf3, 0xb9, 0x23, 0x4c, 0xc7, 0x77, 0x38, 0x23, 0x30, 0xfc, 0x04, 0x15, 0xfa, 0xc2,
	0xf5, 0x85, 0x2b, 0x47, 0xd1, 0x0c, 0x27, 0x1b, 0x88, 0x21, 0x7c, 0x84, 0x4a, 0x70, 0xec, 0x96,
	0xdb, 0xa7, 0x8c, 0x09, 0x3d, 0xdb, 0x3b, 0xe3, 0xd0, 0x2e, 0x82, 0x57, 0x8d, 0xfd, 0x2a, 0x63,
	0xe2, 0x3a, 0xb4, 0xef, 0x27, 0xd2, 0x45, 0xbb, 0x17, 0x41, 0xa6, 0x01, 0x2a, 0x78, 0x03, 0x2d,
	0x53, 0xa6, 0xc6, 0xdc, 0xf5, 0xa4, 0xfe, 0x0d, 0x92, 0xbb, 0x03, 0xd6, 0xf0, 0x24, 0xde, 0x40,
	0x05, 0xe7, 0x94, 0x3b, 0x9f, 0x82, 0x41, 0x0f, 0x9e, 0xf2, 0xfc, 0xa7, 0x11, 0x63, 0xd1, 0x9d,
	0xec, 0x3d, 0xfe, 0x31, 0xb6, 0x8c, 0xab, 0xb1, 0x65, 0xfc, 0x1a, 0x5b, 0xa9, 0xaf, 0x13, 0x2b,
	0x75, 0x39, 0xb1, 0x8c, 0xab, 0x89, 0x95, 0xfa, 0x39, 0xb1, 0x52, 0x1f, 0xf5, 0x2f, 0x7c, 0x92,
	0x83, 0xdf, 0x75, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x8c, 0xf7, 0xf1, 0xb3, 0x05,
	0x00, 0x00,
}
