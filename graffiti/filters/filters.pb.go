// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: graffiti/filters/filters.proto

package filters

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BoolFilterOp int32

const (
	BoolFilterOp_OR  BoolFilterOp = 0
	BoolFilterOp_AND BoolFilterOp = 1
	BoolFilterOp_NOT BoolFilterOp = 2
)

var BoolFilterOp_name = map[int32]string{
	0: "OR",
	1: "AND",
	2: "NOT",
}

var BoolFilterOp_value = map[string]int32{
	"OR":  0,
	"AND": 1,
	"NOT": 2,
}

func (x BoolFilterOp) String() string {
	return proto.EnumName(BoolFilterOp_name, int32(x))
}

func (BoolFilterOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{0}
}

type TermStringFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *TermStringFilter) Reset()         { *m = TermStringFilter{} }
func (m *TermStringFilter) String() string { return proto.CompactTextString(m) }
func (*TermStringFilter) ProtoMessage()    {}
func (*TermStringFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{0}
}
func (m *TermStringFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TermStringFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TermStringFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TermStringFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermStringFilter.Merge(m, src)
}
func (m *TermStringFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TermStringFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TermStringFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TermStringFilter proto.InternalMessageInfo

func (m *TermStringFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TermStringFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TermInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *TermInt64Filter) Reset()         { *m = TermInt64Filter{} }
func (m *TermInt64Filter) String() string { return proto.CompactTextString(m) }
func (*TermInt64Filter) ProtoMessage()    {}
func (*TermInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{1}
}
func (m *TermInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TermInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TermInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TermInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInt64Filter.Merge(m, src)
}
func (m *TermInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TermInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_TermInt64Filter proto.InternalMessageInfo

func (m *TermInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TermInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TermBoolFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *TermBoolFilter) Reset()         { *m = TermBoolFilter{} }
func (m *TermBoolFilter) String() string { return proto.CompactTextString(m) }
func (*TermBoolFilter) ProtoMessage()    {}
func (*TermBoolFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{2}
}
func (m *TermBoolFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TermBoolFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TermBoolFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TermBoolFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermBoolFilter.Merge(m, src)
}
func (m *TermBoolFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TermBoolFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TermBoolFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TermBoolFilter proto.InternalMessageInfo

func (m *TermBoolFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TermBoolFilter) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type NeStringFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *NeStringFilter) Reset()         { *m = NeStringFilter{} }
func (m *NeStringFilter) String() string { return proto.CompactTextString(m) }
func (*NeStringFilter) ProtoMessage()    {}
func (*NeStringFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{3}
}
func (m *NeStringFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeStringFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeStringFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeStringFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeStringFilter.Merge(m, src)
}
func (m *NeStringFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *NeStringFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NeStringFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NeStringFilter proto.InternalMessageInfo

func (m *NeStringFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NeStringFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NeInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *NeInt64Filter) Reset()         { *m = NeInt64Filter{} }
func (m *NeInt64Filter) String() string { return proto.CompactTextString(m) }
func (*NeInt64Filter) ProtoMessage()    {}
func (*NeInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{4}
}
func (m *NeInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeInt64Filter.Merge(m, src)
}
func (m *NeInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *NeInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_NeInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_NeInt64Filter proto.InternalMessageInfo

func (m *NeInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NeInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GtInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GtInt64Filter) Reset()         { *m = GtInt64Filter{} }
func (m *GtInt64Filter) String() string { return proto.CompactTextString(m) }
func (*GtInt64Filter) ProtoMessage()    {}
func (*GtInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{5}
}
func (m *GtInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GtInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GtInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GtInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GtInt64Filter.Merge(m, src)
}
func (m *GtInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GtInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_GtInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_GtInt64Filter proto.InternalMessageInfo

func (m *GtInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GtInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LtInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *LtInt64Filter) Reset()         { *m = LtInt64Filter{} }
func (m *LtInt64Filter) String() string { return proto.CompactTextString(m) }
func (*LtInt64Filter) ProtoMessage()    {}
func (*LtInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{6}
}
func (m *LtInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LtInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LtInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LtInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LtInt64Filter.Merge(m, src)
}
func (m *LtInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LtInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_LtInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_LtInt64Filter proto.InternalMessageInfo

func (m *LtInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LtInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GteInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GteInt64Filter) Reset()         { *m = GteInt64Filter{} }
func (m *GteInt64Filter) String() string { return proto.CompactTextString(m) }
func (*GteInt64Filter) ProtoMessage()    {}
func (*GteInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{7}
}
func (m *GteInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GteInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GteInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GteInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GteInt64Filter.Merge(m, src)
}
func (m *GteInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GteInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_GteInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_GteInt64Filter proto.InternalMessageInfo

func (m *GteInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GteInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LteInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *LteInt64Filter) Reset()         { *m = LteInt64Filter{} }
func (m *LteInt64Filter) String() string { return proto.CompactTextString(m) }
func (*LteInt64Filter) ProtoMessage()    {}
func (*LteInt64Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{8}
}
func (m *LteInt64Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LteInt64Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LteInt64Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LteInt64Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LteInt64Filter.Merge(m, src)
}
func (m *LteInt64Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LteInt64Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_LteInt64Filter.DiscardUnknown(m)
}

var xxx_messageInfo_LteInt64Filter proto.InternalMessageInfo

func (m *LteInt64Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LteInt64Filter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RegexFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *RegexFilter) Reset()         { *m = RegexFilter{} }
func (m *RegexFilter) String() string { return proto.CompactTextString(m) }
func (*RegexFilter) ProtoMessage()    {}
func (*RegexFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{9}
}
func (m *RegexFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegexFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegexFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegexFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegexFilter.Merge(m, src)
}
func (m *RegexFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RegexFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RegexFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RegexFilter proto.InternalMessageInfo

func (m *RegexFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RegexFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NullFilter struct {
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *NullFilter) Reset()         { *m = NullFilter{} }
func (m *NullFilter) String() string { return proto.CompactTextString(m) }
func (*NullFilter) ProtoMessage()    {}
func (*NullFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{10}
}
func (m *NullFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullFilter.Merge(m, src)
}
func (m *NullFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *NullFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NullFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NullFilter proto.InternalMessageInfo

func (m *NullFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type IPV4RangeFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *IPV4RangeFilter) Reset()         { *m = IPV4RangeFilter{} }
func (m *IPV4RangeFilter) String() string { return proto.CompactTextString(m) }
func (*IPV4RangeFilter) ProtoMessage()    {}
func (*IPV4RangeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{11}
}
func (m *IPV4RangeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPV4RangeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPV4RangeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPV4RangeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPV4RangeFilter.Merge(m, src)
}
func (m *IPV4RangeFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *IPV4RangeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_IPV4RangeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_IPV4RangeFilter proto.InternalMessageInfo

func (m *IPV4RangeFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *IPV4RangeFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Filter struct {
	TermStringFilter *TermStringFilter `protobuf:"bytes,1,opt,name=TermStringFilter,proto3" json:"TermStringFilter,omitempty"`
	TermInt64Filter  *TermInt64Filter  `protobuf:"bytes,2,opt,name=TermInt64Filter,proto3" json:"TermInt64Filter,omitempty"`
	TermBoolFilter   *TermBoolFilter   `protobuf:"bytes,3,opt,name=TermBoolFilter,proto3" json:"TermBoolFilter,omitempty"`
	GtInt64Filter    *GtInt64Filter    `protobuf:"bytes,4,opt,name=GtInt64Filter,proto3" json:"GtInt64Filter,omitempty"`
	LtInt64Filter    *LtInt64Filter    `protobuf:"bytes,5,opt,name=LtInt64Filter,proto3" json:"LtInt64Filter,omitempty"`
	GteInt64Filter   *GteInt64Filter   `protobuf:"bytes,6,opt,name=GteInt64Filter,proto3" json:"GteInt64Filter,omitempty"`
	LteInt64Filter   *LteInt64Filter   `protobuf:"bytes,7,opt,name=LteInt64Filter,proto3" json:"LteInt64Filter,omitempty"`
	BoolFilter       *BoolFilter       `protobuf:"bytes,8,opt,name=BoolFilter,proto3" json:"BoolFilter,omitempty"`
	RegexFilter      *RegexFilter      `protobuf:"bytes,9,opt,name=RegexFilter,proto3" json:"RegexFilter,omitempty"`
	NullFilter       *NullFilter       `protobuf:"bytes,10,opt,name=NullFilter,proto3" json:"NullFilter,omitempty"`
	IPV4RangeFilter  *IPV4RangeFilter  `protobuf:"bytes,11,opt,name=IPV4RangeFilter,proto3" json:"IPV4RangeFilter,omitempty"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{12}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetTermStringFilter() *TermStringFilter {
	if m != nil {
		return m.TermStringFilter
	}
	return nil
}

func (m *Filter) GetTermInt64Filter() *TermInt64Filter {
	if m != nil {
		return m.TermInt64Filter
	}
	return nil
}

func (m *Filter) GetTermBoolFilter() *TermBoolFilter {
	if m != nil {
		return m.TermBoolFilter
	}
	return nil
}

func (m *Filter) GetGtInt64Filter() *GtInt64Filter {
	if m != nil {
		return m.GtInt64Filter
	}
	return nil
}

func (m *Filter) GetLtInt64Filter() *LtInt64Filter {
	if m != nil {
		return m.LtInt64Filter
	}
	return nil
}

func (m *Filter) GetGteInt64Filter() *GteInt64Filter {
	if m != nil {
		return m.GteInt64Filter
	}
	return nil
}

func (m *Filter) GetLteInt64Filter() *LteInt64Filter {
	if m != nil {
		return m.LteInt64Filter
	}
	return nil
}

func (m *Filter) GetBoolFilter() *BoolFilter {
	if m != nil {
		return m.BoolFilter
	}
	return nil
}

func (m *Filter) GetRegexFilter() *RegexFilter {
	if m != nil {
		return m.RegexFilter
	}
	return nil
}

func (m *Filter) GetNullFilter() *NullFilter {
	if m != nil {
		return m.NullFilter
	}
	return nil
}

func (m *Filter) GetIPV4RangeFilter() *IPV4RangeFilter {
	if m != nil {
		return m.IPV4RangeFilter
	}
	return nil
}

type BoolFilter struct {
	Op      BoolFilterOp `protobuf:"varint,1,opt,name=Op,proto3,enum=filters.BoolFilterOp" json:"Op,omitempty"`
	Filters []*Filter    `protobuf:"bytes,2,rep,name=Filters,proto3" json:"Filters,omitempty"`
}

func (m *BoolFilter) Reset()         { *m = BoolFilter{} }
func (m *BoolFilter) String() string { return proto.CompactTextString(m) }
func (*BoolFilter) ProtoMessage()    {}
func (*BoolFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{13}
}
func (m *BoolFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolFilter.Merge(m, src)
}
func (m *BoolFilter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BoolFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolFilter.DiscardUnknown(m)
}

var xxx_messageInfo_BoolFilter proto.InternalMessageInfo

func (m *BoolFilter) GetOp() BoolFilterOp {
	if m != nil {
		return m.Op
	}
	return BoolFilterOp_OR
}

func (m *BoolFilter) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Range struct {
	From int64 `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To   int64 `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{14}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Range) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type SearchQuery struct {
	Filter          *Filter `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	PaginationRange *Range  `protobuf:"bytes,2,opt,name=PaginationRange,proto3" json:"PaginationRange,omitempty"`
	Sort            bool    `protobuf:"varint,3,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Dedup           bool    `protobuf:"varint,4,opt,name=Dedup,proto3" json:"Dedup,omitempty"`
	DedupBy         string  `protobuf:"bytes,5,opt,name=DedupBy,proto3" json:"DedupBy,omitempty"`
	SortBy          string  `protobuf:"bytes,6,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
	SortOrder       string  `protobuf:"bytes,7,opt,name=SortOrder,proto3" json:"SortOrder,omitempty"`
}

func (m *SearchQuery) Reset()         { *m = SearchQuery{} }
func (m *SearchQuery) String() string { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()    {}
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8421e6cf9d42cc, []int{15}
}
func (m *SearchQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQuery.Merge(m, src)
}
func (m *SearchQuery) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SearchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQuery proto.InternalMessageInfo

func (m *SearchQuery) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchQuery) GetPaginationRange() *Range {
	if m != nil {
		return m.PaginationRange
	}
	return nil
}

func (m *SearchQuery) GetSort() bool {
	if m != nil {
		return m.Sort
	}
	return false
}

func (m *SearchQuery) GetDedup() bool {
	if m != nil {
		return m.Dedup
	}
	return false
}

func (m *SearchQuery) GetDedupBy() string {
	if m != nil {
		return m.DedupBy
	}
	return ""
}

func (m *SearchQuery) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *SearchQuery) GetSortOrder() string {
	if m != nil {
		return m.SortOrder
	}
	return ""
}

func init() {
	proto.RegisterEnum("filters.BoolFilterOp", BoolFilterOp_name, BoolFilterOp_value)
	proto.RegisterType((*TermStringFilter)(nil), "filters.TermStringFilter")
	proto.RegisterType((*TermInt64Filter)(nil), "filters.TermInt64Filter")
	proto.RegisterType((*TermBoolFilter)(nil), "filters.TermBoolFilter")
	proto.RegisterType((*NeStringFilter)(nil), "filters.NeStringFilter")
	proto.RegisterType((*NeInt64Filter)(nil), "filters.NeInt64Filter")
	proto.RegisterType((*GtInt64Filter)(nil), "filters.GtInt64Filter")
	proto.RegisterType((*LtInt64Filter)(nil), "filters.LtInt64Filter")
	proto.RegisterType((*GteInt64Filter)(nil), "filters.GteInt64Filter")
	proto.RegisterType((*LteInt64Filter)(nil), "filters.LteInt64Filter")
	proto.RegisterType((*RegexFilter)(nil), "filters.RegexFilter")
	proto.RegisterType((*NullFilter)(nil), "filters.NullFilter")
	proto.RegisterType((*IPV4RangeFilter)(nil), "filters.IPV4RangeFilter")
	proto.RegisterType((*Filter)(nil), "filters.Filter")
	proto.RegisterType((*BoolFilter)(nil), "filters.BoolFilter")
	proto.RegisterType((*Range)(nil), "filters.Range")
	proto.RegisterType((*SearchQuery)(nil), "filters.SearchQuery")
}

func init() { proto.RegisterFile("graffiti/filters/filters.proto", fileDescriptor_3b8421e6cf9d42cc) }

var fileDescriptor_3b8421e6cf9d42cc = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0x63, 0xbb, 0xf9, 0xe3, 0xf1, 0xaf, 0x69, 0xb4, 0xbf, 0x52, 0x16, 0x84, 0xac, 0x2a,
	0x12, 0xa2, 0x80, 0x68, 0xa4, 0xa4, 0xb4, 0x05, 0x55, 0xaa, 0xb0, 0x4a, 0xab, 0x8a, 0x28, 0x6e,
	0xb7, 0x51, 0x0f, 0x1c, 0x90, 0xdc, 0x76, 0xeb, 0x1a, 0xd2, 0xac, 0xe5, 0x6c, 0x10, 0x79, 0x0b,
	0x1e, 0x81, 0xc7, 0xe0, 0x11, 0x38, 0xf6, 0xc8, 0x11, 0x25, 0x37, 0x9e, 0x02, 0x79, 0x63, 0x27,
	0xf6, 0x1a, 0xa4, 0xd6, 0xa7, 0xcc, 0xec, 0xcc, 0x77, 0x66, 0x3d, 0xf9, 0x8c, 0x16, 0x4c, 0x37,
	0x70, 0x2e, 0x2f, 0x3d, 0xee, 0x35, 0x2e, 0xbd, 0x1e, 0xa7, 0xc1, 0x20, 0xfe, 0x5d, 0xf7, 0x03,
	0xc6, 0x19, 0x2a, 0x47, 0xee, 0xc3, 0x65, 0x97, 0xb9, 0x4c, 0x9c, 0x35, 0x42, 0x6b, 0x1a, 0xae,
	0xbf, 0x86, 0x5a, 0x97, 0x06, 0xd7, 0x27, 0x3c, 0xf0, 0xfa, 0xee, 0xbe, 0x48, 0x45, 0x35, 0xd0,
	0xde, 0xd1, 0x11, 0x56, 0x56, 0x95, 0x35, 0x9d, 0x84, 0x26, 0x5a, 0x86, 0xe2, 0xa9, 0xd3, 0x1b,
	0x52, 0xac, 0x8a, 0xb3, 0xa9, 0x53, 0x7f, 0x05, 0x4b, 0xa1, 0xf6, 0xb0, 0xcf, 0x37, 0x37, 0x6e,
	0x27, 0xd5, 0x62, 0xe9, 0x36, 0x54, 0x43, 0xa9, 0xc5, 0x58, 0xef, 0x76, 0xca, 0x4a, 0x42, 0xd9,
	0xa1, 0xb9, 0xae, 0xbb, 0x05, 0x8b, 0x1d, 0x9a, 0xe7, 0xb2, 0x5b, 0xb0, 0x78, 0xc0, 0x73, 0x0a,
	0xdb, 0x3c, 0xe7, 0x78, 0x0e, 0x38, 0xcd, 0xa9, 0x6c, 0xe7, 0x53, 0xbe, 0x04, 0x83, 0x50, 0x97,
	0x7e, 0xb9, 0xe3, 0x54, 0x4d, 0x80, 0xce, 0xb0, 0xf7, 0xcf, 0x7f, 0x31, 0x84, 0xe4, 0xf0, 0xe8,
	0x74, 0x83, 0x38, 0x7d, 0x97, 0xde, 0xb1, 0xf4, 0xf7, 0x22, 0x94, 0x22, 0xc9, 0xdb, 0x2c, 0xa6,
	0x42, 0x6f, 0x34, 0x1f, 0xac, 0xc7, 0xbc, 0xcb, 0x09, 0x24, 0x4b, 0xb6, 0x95, 0x21, 0x56, 0x74,
	0x34, 0x9a, 0x38, 0x55, 0x25, 0x11, 0x27, 0x19, 0xc4, 0x77, 0x65, 0x74, 0xb1, 0x26, 0x4a, 0xdc,
	0x4f, 0x95, 0x98, 0x87, 0x89, 0x4c, 0xfa, 0x8e, 0x84, 0x13, 0x5e, 0x10, 0xfa, 0x95, 0x99, 0x3e,
	0x15, 0x25, 0x12, 0x7b, 0x3b, 0x12, 0x53, 0xb8, 0x28, 0xa9, 0xdb, 0x69, 0x75, 0x1a, 0xc0, 0x5d,
	0x19, 0x2c, 0x5c, 0x92, 0x2e, 0x9f, 0x0e, 0x13, 0x99, 0xc3, 0x5d, 0x99, 0x2f, 0x5c, 0x96, 0x0a,
	0xb4, 0xa5, 0x02, 0x12, 0x8e, 0x2d, 0x80, 0xc4, 0xe8, 0x2a, 0x42, 0xfc, 0xff, 0x4c, 0x9c, 0x18,
	0x5b, 0x22, 0x0d, 0x6d, 0xa6, 0xd8, 0xc4, 0xba, 0x50, 0x2d, 0xcf, 0x54, 0x89, 0x18, 0x49, 0x41,
	0xdc, 0x4a, 0xc2, 0x89, 0x41, 0x6a, 0x36, 0x0f, 0x91, 0x24, 0xc3, 0x56, 0x86, 0x58, 0x6c, 0x48,
	0x90, 0x48, 0x71, 0x22, 0x0b, 0xea, 0x1f, 0x92, 0x5f, 0x89, 0x1e, 0x83, 0x6a, 0xfb, 0x82, 0xd7,
	0x6a, 0xf3, 0xde, 0x5f, 0xbe, 0xd5, 0xf6, 0x89, 0x6a, 0xfb, 0xe8, 0x29, 0x94, 0xa7, 0xfe, 0x00,
	0xab, 0xab, 0xda, 0x9a, 0xd1, 0x5c, 0x9a, 0xe5, 0x46, 0x7d, 0xe2, 0x78, 0xfd, 0x39, 0x14, 0x45,
	0x3b, 0x84, 0x60, 0x61, 0x3f, 0x60, 0xd7, 0xa2, 0xb8, 0x46, 0x84, 0x8d, 0xaa, 0xa0, 0x76, 0x59,
	0xb4, 0xdc, 0x6a, 0x97, 0xd5, 0x7f, 0x2b, 0x60, 0x9c, 0x50, 0x27, 0x38, 0xbf, 0x3a, 0x1e, 0xd2,
	0x60, 0x84, 0x9e, 0xc4, 0x6b, 0x15, 0xad, 0x50, 0xa6, 0x4d, 0xbc, 0x75, 0xdb, 0xb0, 0x74, 0xe4,
	0xb8, 0x5e, 0xdf, 0xe1, 0x1e, 0xeb, 0x8b, 0x7e, 0xd1, 0xba, 0x54, 0xe7, 0xa3, 0x0f, 0x4f, 0x89,
	0x9c, 0x16, 0x5e, 0xeb, 0x84, 0x05, 0x5c, 0xac, 0x46, 0x85, 0x08, 0x3b, 0x5c, 0xf2, 0x3d, 0x7a,
	0x31, 0xf4, 0x05, 0xef, 0x15, 0x32, 0x75, 0x10, 0x86, 0xb2, 0x30, 0xac, 0x91, 0x20, 0x59, 0x27,
	0xb1, 0x8b, 0x56, 0xa0, 0x14, 0xea, 0xac, 0x91, 0x60, 0x54, 0x27, 0x91, 0x87, 0x1e, 0x81, 0x1e,
	0x5a, 0x76, 0x70, 0x11, 0xd1, 0xa7, 0x93, 0xf9, 0xc1, 0xb3, 0x35, 0xf8, 0x2f, 0x39, 0x58, 0x54,
	0x02, 0xd5, 0x26, 0xb5, 0x02, 0x2a, 0x83, 0xf6, 0xa6, 0xb3, 0x57, 0x53, 0x42, 0xa3, 0x63, 0x77,
	0x6b, 0xaa, 0x75, 0xfc, 0x63, 0x6c, 0x2a, 0x37, 0x63, 0x53, 0xf9, 0x35, 0x36, 0x0b, 0x5f, 0x27,
	0x66, 0xe1, 0xdb, 0xc4, 0x54, 0x6e, 0x26, 0x66, 0xe1, 0xe7, 0xc4, 0x2c, 0xbc, 0x6f, 0xb9, 0x1e,
	0xbf, 0x1a, 0x9e, 0xad, 0x9f, 0xb3, 0xeb, 0xc6, 0xe0, 0xd3, 0xe8, 0xc2, 0xfb, 0x4c, 0x5f, 0xf8,
	0x01, 0xfb, 0x48, 0xcf, 0x79, 0xec, 0x37, 0xe4, 0xa7, 0xf7, 0xac, 0x24, 0x1e, 0xd5, 0xd6, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x80, 0xe5, 0xa1, 0x95, 0x07, 0x00, 0x00,
}

func (m *TermStringFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TermStringFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TermStringFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TermInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TermInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TermInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TermBoolFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TermBoolFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TermBoolFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NeStringFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeStringFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeStringFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NeInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GtInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GtInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GtInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LtInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LtInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LtInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GteInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GteInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GteInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LteInt64Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LteInt64Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LteInt64Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegexFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegexFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegexFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NullFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPV4RangeFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPV4RangeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPV4RangeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IPV4RangeFilter != nil {
		{
			size, err := m.IPV4RangeFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.NullFilter != nil {
		{
			size, err := m.NullFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RegexFilter != nil {
		{
			size, err := m.RegexFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.BoolFilter != nil {
		{
			size, err := m.BoolFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.LteInt64Filter != nil {
		{
			size, err := m.LteInt64Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.GteInt64Filter != nil {
		{
			size, err := m.GteInt64Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LtInt64Filter != nil {
		{
			size, err := m.LtInt64Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GtInt64Filter != nil {
		{
			size, err := m.GtInt64Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TermBoolFilter != nil {
		{
			size, err := m.TermBoolFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TermInt64Filter != nil {
		{
			size, err := m.TermInt64Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TermStringFilter != nil {
		{
			size, err := m.TermStringFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BoolFilter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Op != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchQuery) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortOrder) > 0 {
		i -= len(m.SortOrder)
		copy(dAtA[i:], m.SortOrder)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.SortOrder)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DedupBy) > 0 {
		i -= len(m.DedupBy)
		copy(dAtA[i:], m.DedupBy)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.DedupBy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Dedup {
		i--
		if m.Dedup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Sort {
		i--
		if m.Sort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PaginationRange != nil {
		{
			size, err := m.PaginationRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilters(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TermStringFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *TermInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *TermBoolFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *NeStringFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *NeInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *GtInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *LtInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *GteInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *LteInt64Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFilters(uint64(m.Value))
	}
	return n
}

func (m *RegexFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *NullFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *IPV4RangeFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermStringFilter != nil {
		l = m.TermStringFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.TermInt64Filter != nil {
		l = m.TermInt64Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.TermBoolFilter != nil {
		l = m.TermBoolFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.GtInt64Filter != nil {
		l = m.GtInt64Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.LtInt64Filter != nil {
		l = m.LtInt64Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.GteInt64Filter != nil {
		l = m.GteInt64Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.LteInt64Filter != nil {
		l = m.LteInt64Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.BoolFilter != nil {
		l = m.BoolFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.RegexFilter != nil {
		l = m.RegexFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.NullFilter != nil {
		l = m.NullFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.IPV4RangeFilter != nil {
		l = m.IPV4RangeFilter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func (m *BoolFilter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovFilters(uint64(m.Op))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.ProtoSize()
			n += 1 + l + sovFilters(uint64(l))
		}
	}
	return n
}

func (m *Range) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovFilters(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovFilters(uint64(m.To))
	}
	return n
}

func (m *SearchQuery) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.PaginationRange != nil {
		l = m.PaginationRange.ProtoSize()
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.Sort {
		n += 2
	}
	if m.Dedup {
		n += 2
	}
	l = len(m.DedupBy)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.SortOrder)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	return n
}

func sovFilters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilters(x uint64) (n int) {
	return sovFilters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TermStringFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TermStringFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TermStringFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TermInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TermInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TermInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TermBoolFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TermBoolFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TermBoolFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeStringFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeStringFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeStringFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GtInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GtInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GtInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LtInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LtInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LtInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GteInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GteInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GteInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LteInt64Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LteInt64Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LteInt64Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegexFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegexFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegexFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPV4RangeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPV4RangeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPV4RangeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermStringFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TermStringFilter == nil {
				m.TermStringFilter = &TermStringFilter{}
			}
			if err := m.TermStringFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermInt64Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TermInt64Filter == nil {
				m.TermInt64Filter = &TermInt64Filter{}
			}
			if err := m.TermInt64Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermBoolFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TermBoolFilter == nil {
				m.TermBoolFilter = &TermBoolFilter{}
			}
			if err := m.TermBoolFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtInt64Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtInt64Filter == nil {
				m.GtInt64Filter = &GtInt64Filter{}
			}
			if err := m.GtInt64Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtInt64Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LtInt64Filter == nil {
				m.LtInt64Filter = &LtInt64Filter{}
			}
			if err := m.LtInt64Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GteInt64Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GteInt64Filter == nil {
				m.GteInt64Filter = &GteInt64Filter{}
			}
			if err := m.GteInt64Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteInt64Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LteInt64Filter == nil {
				m.LteInt64Filter = &LteInt64Filter{}
			}
			if err := m.LteInt64Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoolFilter == nil {
				m.BoolFilter = &BoolFilter{}
			}
			if err := m.BoolFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegexFilter == nil {
				m.RegexFilter = &RegexFilter{}
			}
			if err := m.RegexFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NullFilter == nil {
				m.NullFilter = &NullFilter{}
			}
			if err := m.NullFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPV4RangeFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPV4RangeFilter == nil {
				m.IPV4RangeFilter = &IPV4RangeFilter{}
			}
			if err := m.IPV4RangeFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= BoolFilterOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &Filter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationRange == nil {
				m.PaginationRange = &Range{}
			}
			if err := m.PaginationRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dedup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dedup = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilters = fmt.Errorf("proto: unexpected end of group")
)
