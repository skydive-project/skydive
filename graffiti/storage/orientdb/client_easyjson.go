// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package orientdb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(in *jlexer.Lexer, out *Property) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "linkedType":
			out.LinkedType = string(in.String())
		case "linkedClass":
			out.LinkedClass = string(in.String())
		case "mandatory":
			out.Mandatory = bool(in.Bool())
		case "notNull":
			out.NotNull = bool(in.Bool())
		case "readonly":
			out.ReadOnly = bool(in.Bool())
		case "collate":
			out.Collate = string(in.String())
		case "regexp":
			out.Regexp = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(out *jwriter.Writer, in Property) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.LinkedType != "" {
		const prefix string = ",\"linkedType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LinkedType))
	}
	if in.LinkedClass != "" {
		const prefix string = ",\"linkedClass\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LinkedClass))
	}
	{
		const prefix string = ",\"mandatory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mandatory))
	}
	{
		const prefix string = ",\"notNull\":"
		out.RawString(prefix)
		out.Bool(bool(in.NotNull))
	}
	{
		const prefix string = ",\"readonly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.Collate != "" {
		const prefix string = ",\"collate\":"
		out.RawString(prefix)
		out.String(string(in.Collate))
	}
	if in.Regexp != "" {
		const prefix string = ",\"regexp\":"
		out.RawString(prefix)
		out.String(string(in.Regexp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Property) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Property) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Property) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Property) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(in *jlexer.Lexer, out *Index) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Fields = append(out.Fields, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(out *jwriter.Writer, in Index) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Fields {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Index) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Index) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Index) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Index) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb1(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(in *jlexer.Lexer, out *Errors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]Error, 0, 2)
					} else {
						out.Errors = []Error{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Error
					(v4).UnmarshalEasyJSON(in)
					out.Errors = append(out.Errors, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(out *jwriter.Writer, in Errors) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix[1:])
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Errors {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Errors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Errors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Errors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Errors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb2(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "reason":
			out.Reason = int(in.Int())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.Int(int(in.Reason))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb3(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(in *jlexer.Lexer, out *DocumentClass) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "class":
			(out.Class).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(out *jwriter.Writer, in DocumentClass) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix[1:])
		(in.Class).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentClass) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentClass) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentClass) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentClass) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb4(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(in *jlexer.Lexer, out *ClassDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "superClass":
			out.SuperClass = string(in.String())
		case "superClasses":
			if in.IsNull() {
				in.Skip()
				out.SuperClasses = nil
			} else {
				in.Delim('[')
				if out.SuperClasses == nil {
					if !in.IsDelim(']') {
						out.SuperClasses = make([]string, 0, 4)
					} else {
						out.SuperClasses = []string{}
					}
				} else {
					out.SuperClasses = (out.SuperClasses)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.SuperClasses = append(out.SuperClasses, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "abstract":
			out.Abstract = bool(in.Bool())
		case "strictmode":
			out.StrictMode = bool(in.Bool())
		case "alias":
			out.Alias = string(in.String())
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]Property, 0, 1)
					} else {
						out.Properties = []Property{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Property
					(v8).UnmarshalEasyJSON(in)
					out.Properties = append(out.Properties, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "indexes":
			if in.IsNull() {
				in.Skip()
				out.Indexes = nil
			} else {
				in.Delim('[')
				if out.Indexes == nil {
					if !in.IsDelim(']') {
						out.Indexes = make([]Index, 0, 1)
					} else {
						out.Indexes = []Index{}
					}
				} else {
					out.Indexes = (out.Indexes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Index
					(v9).UnmarshalEasyJSON(in)
					out.Indexes = append(out.Indexes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(out *jwriter.Writer, in ClassDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.SuperClass != "" {
		const prefix string = ",\"superClass\":"
		out.RawString(prefix)
		out.String(string(in.SuperClass))
	}
	if len(in.SuperClasses) != 0 {
		const prefix string = ",\"superClasses\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.SuperClasses {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"abstract\":"
		out.RawString(prefix)
		out.Bool(bool(in.Abstract))
	}
	{
		const prefix string = ",\"strictmode\":"
		out.RawString(prefix)
		out.Bool(bool(in.StrictMode))
	}
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Properties {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Indexes) != 0 {
		const prefix string = ",\"indexes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Indexes {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClassDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClassDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClassDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClassDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComSkydiveProjectSkydiveGraffitiStorageOrientdb5(l, v)
}
